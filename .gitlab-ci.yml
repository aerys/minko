include:
  - project: 'aerys/infrastructure/gitlab-ci-templates'
    ref: 'v0.7.2'
    file: '/jobs/docker-in-docker/Docker-In-Docker.gitlab-ci.yml'
  - project: 'aerys/infrastructure/gitlab-ci-templates'
    ref: 'v0.7.2'
    file: '/jobs/commitlint/commintlint.gitlab-ci.yml'
  - project: 'aerys/infrastructure/gitlab-ci-templates'
    ref: 'v0.7.2'
    file: '/jobs/semantic-release/semantic-release.gitlab-ci.yml'

variables:
  DOCKER_BUILD_FORCE:
    value: "false"
    description: "Force a build of the container images."
  DOCKER_PUSH_FORCE:
    value: "false"
    description: "Force the container images to be pushed to the registry even if an image with the same label exists."

stages:
  - build
  - test
  - check
  - archive
  - publish
  - release

.docker_build_template: &docker_build_template
  stage: build
  tags:
    - virtualbox
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - docker/$DOCKER_IMAGE_NAME/Dockerfile
    - if: $DOCKER_BUILD_FORCE == "true"
  artifacts:
    expire_in: 1 hr
    paths:
      - ./docker-image.tar
  before_script:
    - docker info
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} docker/${DOCKER_IMAGE_NAME}
    - docker save ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} -o docker-image.tar

.docker_push_template: &docker_push_template
  stage: archive
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - docker/$DOCKER_IMAGE_NAME/Dockerfile
    - if: $DOCKER_PUSH_FORCE == "true"
  tags:
    - virtualbox
  before_script:
    - docker info
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker load -i docker-image.tar
    - docker tag ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:main
    - "( [ -z $DOCKER_PUSH_FORCE ] || [ ${DOCKER_PUSH_FORCE} != true ] ) && docker manifest inspect ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} &> /dev/null && echo \"Image already exists\" && exit 1"
    - docker push ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}
    - docker push ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:main

.build_with_artifacts_template: &build_with_artifacts_template
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
    expire_in: 6 hr
    paths:
      - build/module
      - build/framework/enable.cmake
      - build/framework/bin
      - build/framework/asset
      - build/framework/lib
      - build/framework/include
      - build/plugin/*/bin
      - build/plugin/*/asset
      - build/plugin/*/lib
      - build/plugin/*/include
      - build/plugin/*/enable.cmake
      - build/plugin/html-overlay/src/android/tasks/*.java
      - build/plugin/html-overlay/src/android/webview/*.java
      - build/plugin/sensors/src/android/*.java
      - build/plugin/nodejs-worker/src/minko/file/*.java
      - build/plugin/video-camera/src/minko/video/*.java
      - build/template
      - build/cmake
      - build/test
      - LICENSE.md
      - README.md

.build_template: &build_template
  stage: build
  extends:
    - .docker-in-docker
    - .build_with_artifacts_template
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - apk add bash
  script:
    - BUILD_DIR=build bash script/build.sh $TARGET_PLATFORM release

.archive_template: &archive_template
  stage: archive
  image: registry.aerys.in/aerys/smartshape-docker/archive:26975
  except:
    - main
  script:
    - cd "${CI_PROJECT_DIR}"
    - tar -cjSf "/tmp/${ARCHIVE_NAME}" *
    - b2 authorize_account "${B2_ACCOUNT_ID}" "${B2_APPLICATION_KEY}"
    - b2 upload_file --noProgress --info CI_PIPELINE_ID=${CI_PIPELINE_ID} --info CI_COMMIT_SHA=${CI_COMMIT_SHA} "${B2_ARTIFACTS_BUCKET}" "/tmp/${ARCHIVE_NAME}" "${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}/${ARCHIVE_NAME}"

.publish_template: &publish_template
  image: registry.aerys.in/aerys/infrastructure/vendor/rust-docker:1.72.0-1
  stage: publish
  only:
    - main
    - tags
  script:
    - PACKAGE_VERSION="main" # Default
    - PACKAGE_VERSION=$(([[ "$CI_COMMIT_TAG" ]] && echo "$CI_COMMIT_TAG") || echo "$PACKAGE_VERSION")
    - ARCHIVE_NAME="${CI_PROJECT_NAME}-${PLATFORM}-${PACKAGE_VERSION}.tar.bz2"
    - apt-get update && apt-get install -y jq
    - cd "${CI_PROJECT_DIR}"
    - tar -cjSf "/tmp/${ARCHIVE_NAME}" *
    # Publish the package.
    - 'curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "/tmp/${ARCHIVE_NAME}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${PACKAGE_VERSION}/${ARCHIVE_NAME}"'

build:html5:
  <<: *build_template
  variables:
    TARGET_PLATFORM: html5

build:android:
  <<: *build_template
  variables:
    TARGET_PLATFORM: android

build:linux64_offscreen:
  <<: *build_template
  variables:
    TARGET_PLATFORM: linux64_offscreen

build:windows64:
  <<: *build_with_artifacts_template
  stage: build
  tags:
    - windows
  script:
    - $env:MINKO_HOME="{0}" -f (Get-Location).ToString()
    - bash plugin\serializer\script\download_dependencies.sh .
    - New-Item -ItemType Directory -Force -Path build
    - Set-Location -Path build
    - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON ..
    - msbuild Project.sln /property:Configuration=Release /property:Platform=x64 /m:4

build:windows64_offscreen:
  <<: *build_with_artifacts_template
  stage: build
  tags:
    - windows
  script:
    - $env:MINKO_HOME="{0}" -f (Get-Location).ToString()
    - bash plugin\serializer\script\download_dependencies.sh .
    - New-Item -ItemType Directory -Force -Path build
    - Set-Location -Path build
    - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON -DWITH_OFFSCREEN=ON -DWITH_TEXTURE_COMPRESSOR=ON -DWITH_TESTS=ON ..
    - msbuild Project.sln /property:Configuration=Release /property:Platform=x64 /m:4

# Disabled until https://git.aerys.in/aerys/smartshape-engine/issues/166 is fixed.
# test:windows64_offscreen:
#   stage: test
#   tags:
#     - windows
#   dependencies:
#     - build:windows64_offscreen
#   artifacts:
#     name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
#     when: on_failure
#     expire_in: 1 hr
#     paths:
#       - build/test
#   script:
#     - cd .\build\test\bin
#     - minko-test.exe

test:linux64_offscreen:
  stage: test
  image: registry.aerys.in/aerys/smartshape/vendor/gcc@sha256:d4a63069d9b69ca4233eecd17638356d7e01aeb66f447db5b3e606a75f527887
  dependencies:
    - build:linux64_offscreen
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
    when: on_failure
    expire_in: 1 hr
    paths:
      - build/test
  before_script:
    - apt-get update
    - apt-get install -y python3-pip
    - cd ./test/websocket-server
    - pip3 install -r requirements.txt
    - python3 server.py &
    - WS_SERVER_PID=$!
    - python3 tls_server.py &
    - WSS_SERVER_PID=$!
  script:
    - cd "${CI_PROJECT_DIR}/build/test/bin"
    - ./minko-test
    - kill -SIGINT ${WS_SERVER_PID}
    - kill -SIGINT ${WSS_SERVER_PID}
    - wait

build:linux64:
  <<: *build_template
  variables:
    TARGET_PLATFORM: linux64

archive:linux64_offscreen:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-linux64_offscreen-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:linux64_offscreen

archive:android:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-android-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:android

archive:html5:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-html5-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:html5

archive:linux:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-linux-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:linux64

archive:windows64:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-windows64-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:windows64

archive:windows64_offscreen:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-windows64_offscreen-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:windows64_offscreen

lint:commitlint:
  extends: .commitlint
  stage: check

check:semantic-release:
  stage: check
  extends: .semantic-release-dry-run

publish:linux64_offscreen:
  <<: *publish_template
  dependencies:
    - build:linux64_offscreen
  variables:
    PLATFORM: "linux64_offscreen"

publish:android:
  <<: *publish_template
  dependencies:
    - build:android
  variables:
    PLATFORM: "android"

publish:html5:
  <<: *publish_template
  dependencies:
    - build:html5
  variables:
    PLATFORM: "html5"

publish:linux:
  <<: *publish_template
  dependencies:
    - build:linux64
  variables:
    PLATFORM: "linux"

publish:windows64:
  <<: *publish_template
  dependencies:
    - build:windows64
  variables:
    PLATFORM: "windows64"

publish:windows64_offscreen:
  <<: *publish_template
  dependencies:
    - build:windows64_offscreen
  variables:
    PLATFORM: "windows64_offscreen"

release:
  stage: release
  extends: .semantic-release
