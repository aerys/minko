workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

variables:
  DOCKER_BUILD_FORCE:
    value: "false"
    description: "Force a build of the container images."
  DOCKER_PUSH_FORCE:
    value: "false"
    description: "Force the container images to be pushed to the registry even if an image with the same label exists."

stages:
  - build
  - test
  - archive
  - release

.docker_build_template: &docker_build_template
  stage: build
  tags:
    - virtualbox
  rules:
    - changes:
        - docker/$DOCKER_IMAGE_NAME/Dockerfile
    - if: '$DOCKER_BUILD_FORCE == "true"'
  artifacts:
      expire_in: 1 hr
      paths:
        - ./docker-image.tar
  before_script:
    - docker info
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} ${DOCKER_IMAGE_NAME}
    - docker save ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} -o docker-image.tar

.docker_push_template: &docker_push_template
  stage: archive
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      changes:
        - docker/$DOCKER_IMAGE_NAME/Dockerfile
    - if: '$DOCKER_PUSH_FORCE == "true"'
  tags:
    - virtualbox
  before_script:
    - docker info
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker load -i docker-image.tar
    - docker tag ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:main
    - "( [ -z $DOCKER_PUSH_FORCE ] || [ ${DOCKER_PUSH_FORCE} != true ] ) && docker manifest inspect ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID} &> /dev/null && echo \"Image already exists\" && exit 1"
    - docker push ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_PIPELINE_ID}
    - docker push ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:main

.build_with_artifacts_template: &build_with_artifacts_template
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
    expire_in: 6 hr
    paths:
      - build/module
      - build/framework/enable.cmake
      - build/framework/bin
      - build/framework/asset
      - build/framework/lib
      - build/framework/include
      - build/plugin/*/bin
      - build/plugin/*/asset
      - build/plugin/*/lib
      - build/plugin/*/include
      - build/plugin/*/enable.cmake
      - build/plugin/html-overlay/src/android/tasks/*.java
      - build/plugin/html-overlay/src/android/webview/*.java
      - build/plugin/sensors/src/android/*.java
      - build/plugin/nodejs-worker/src/minko/file/*.java
      - build/plugin/video-camera/src/minko/video/*.java
      - build/template
      - build/cmake
      - build/test
      - LICENSE.md
      - README.md

.archive_template: &archive_template
  stage: archive
  image: registry.aerys.in/aerys/smartshape-docker/archive:26975
  except:
    - master
  script:
    - cd "${CI_PROJECT_DIR}"
    - tar -cjSf "/tmp/${ARCHIVE_NAME}" *
    - b2 authorize_account "${B2_ACCOUNT_ID}" "${B2_APPLICATION_KEY}"
    - b2 upload_file --noProgress --info CI_PIPELINE_ID=${CI_PIPELINE_ID} --info CI_COMMIT_SHA=${CI_COMMIT_SHA} "${B2_ARTIFACTS_BUCKET}" "/tmp/${ARCHIVE_NAME}" "${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}/${ARCHIVE_NAME}"

docker_build:android:
  variables:
    DOCKER_IMAGE_NAME: android
  <<: *docker_build_template

docker_build:html5:
  variables:
    DOCKER_IMAGE_NAME: html5
  <<: *docker_build_template

docker_build:linux64:
  variables:
    DOCKER_IMAGE_NAME: linux64
  <<: *docker_build_template

docker_push:android:
  variables:
    DOCKER_IMAGE_NAME: android
  dependencies:
    - docker_build:android
  <<: *docker_push_template

docker_push:html5:
  variables:
    DOCKER_IMAGE_NAME: html5
  dependencies:
    - docker_build:html5
  <<: *docker_push_template

docker_push:linux64:
  variables:
    DOCKER_IMAGE_NAME: linux64
  dependencies:
    - docker_build:linux64
  <<: *docker_push_template

build:html5:
  <<: *build_with_artifacts_template
  stage: build
  image: registry.aerys.in/aerys/smartshape-docker/html5:14459
  script:
    - mkdir -p build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -DWITH_WASM=ON -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON -DCMAKE_TOOLCHAIN_FILE=/emsdk_portable/emscripten/sdk/cmake/Modules/Platform/Emscripten.cmake ..
    - make -j$(nproc)

build:android:
  <<: *build_with_artifacts_template
  stage: build
  image: registry.aerys.in/aerys/smartshape-docker/android:5702
  script:
    - mkdir -p build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON -DWITH_NODEJS_WORKER=ON -DCMAKE_TOOLCHAIN_FILE=/opt/android-ndk-linux/build/cmake/android.toolchain.cmake ..
    - make

build:linux64:
  <<: *build_with_artifacts_template
  stage: build
  image: registry.aerys.in/aerys/smartshape-docker/linux64:8398
  script:
    - mkdir -p build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON ..
    - make -j$(nproc)

build:linux64_offscreen:
  <<: *build_with_artifacts_template
  stage: build
  image: registry.aerys.in/aerys/smartshape-docker/linux64:8398
  script:
    - ./plugin/serializer/script/download_dependencies.sh .
    - mkdir -p build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON -DWITH_OFFSCREEN=ON -DWITH_TEXTURE_COMPRESSOR=ON -DWITH_TESTS=ON ..
    - make -j$(nproc)

build:windows64:
  <<: *build_with_artifacts_template
  stage: build
  tags:
    - windows
  script:
    - $env:MINKO_HOME="{0}" -f (Get-Location).ToString()
    - bash plugin\serializer\script\download_dependencies.sh .
    - New-Item -ItemType Directory -Force -Path build
    - Set-Location -Path build
    - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON ..
    - msbuild Project.sln /property:Configuration=Release /property:Platform=x64 /m:4

build:windows64_offscreen:
  <<: *build_with_artifacts_template
  stage: build
  tags:
    - windows
  script:
    - $env:MINKO_HOME="{0}" -f (Get-Location).ToString()
    - bash plugin\serializer\script\download_dependencies.sh .
    - New-Item -ItemType Directory -Force -Path build
    - Set-Location -Path build
    - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=OFF -DWITH_PLUGINS=ON -DWITH_OFFSCREEN=ON -DWITH_TEXTURE_COMPRESSOR=ON -DWITH_TESTS=ON ..
    - msbuild Project.sln /property:Configuration=Release /property:Platform=x64 /m:4

# Disabled until https://git.aerys.in/aerys/smartshape-engine/issues/166 is fixed.
# test:windows64_offscreen:
#   stage: test
#   tags:
#     - windows
#   dependencies:
#     - build:windows64_offscreen
#   artifacts:
#     name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
#     when: on_failure
#     expire_in: 1 hr
#     paths:
#       - build/test
#   script:
#     - cd .\build\test\bin
#     - minko-test.exe

test:linux64_offscreen:
  stage: test
  image: registry.aerys.in/aerys/smartshape-docker/linux64:8398
  dependencies:
    - build:linux64_offscreen
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}"
    when: on_failure
    expire_in: 1 hr
    paths:
      - build/test
  script:
    - cd ./test/websocket-server
    - pip3 install -r requirements.txt
    - python3 server.py &
    - WS_SERVER_PID=$!
    - python3 tls_server.py &
    - WSS_SERVER_PID=$!
    - cd ../../build/test/bin
    - ./minko-test
    - kill -SIGINT ${WS_SERVER_PID}
    - kill -SIGINT ${WSS_SERVER_PID}
    - wait

archive:linux64_offscreen:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-linux64_offscreen-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:linux64_offscreen

archive:android:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-android-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:android

archive:html5:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-html5-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:html5

archive:linux:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-linux-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:linux64

archive:windows64:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-windows64-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:windows64

archive:windows64_offscreen:
  <<: *archive_template
  variables:
    GIT_STRATEGY: none
    ARCHIVE_NAME: ${CI_PROJECT_NAME}-windows64_offscreen-${CI_COMMIT_REF_SLUG}.tar.bz2
  dependencies:
    - build:windows64_offscreen

release:
  stage: release
  image: registry.aerys.in/aerys/gitlab-flow-release:0.4.1
  only:
    - tags
  variables:
    GIT_STRATEGY: none
  script: gitlab-flow-release --private-token "${RELEASE_PRIVATE_TOKEN}" release
