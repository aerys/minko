// line effect
{
    "name" : "line",

    "attributes" : {
        "aStartPosition"  : "geometry[$geometryUuid].startPosition",
		"aStopPosition"   : "geometry[$geometryUuid].stopPosition",
		"aWeights"        : "geometry[$geometryUuid].weights"
    },

    "uniforms"   : {
        "uModelToWorldMatrix"    : "modelToWorldMatrix",
        "uDiffuseColor"          : { "binding" : "material[$materialUuid].diffuseColor" },
		"uWorldToScreenMatrix"   : { "binding" : { "property" : "worldToScreenMatrix", "source" : "renderer" } },
        "uLineThickness"         : { "binding" : { "property" : "material[$materialUuid].lineThickness", "source" : "target" }, "default" : 1.0 },
        "uViewport"              : { "binding" : { "property" : "viewport", "source" : "root" } },
		"uTime"				     : { "binding" : { "property" : "time", "source" : "root" } },
        "uLineDashLength"        : { "binding" : "material[$materialUuid].lineDashLength" },
        "uLineDashSpeed"         : { "binding" : "material[$materialUuid].lineDashSpeed" }
    },

    "macros" : {
        "DIFFUSE_COLOR"     : "material[$materialUuid].diffuseColor",
        "MODEL_TO_WORLD"    : "modelToWorldMatrix",
        "LINE_DASH_LENGTH"  : "material[$materialUuid].lineDashLength",
        "LINE_DASH_SPEED"   : "material[$materialUuid].lineDashSpeed"
    },

    "states" : {
        "priority"	            : { "binding" : "material[${materialUuid}].priority", "default" : "opaque" },
        "blendingSource"		: { "binding" : "material[${materialUuid}].blendingSource" },
		"blendingDestination"	: { "binding" : "material[${materialUuid}].blendingDestination" },
        "depthMask"             : { "binding" : "material[$materialUuid].depthMask" },
        "depthFunction"         : { "binding" : "material[$materialUuid].depthFunction" },
        "triangleCulling"       : { "binding" : "material[$materialUuid].triangleCulling" }
    },

	"techniques" : [{
        "name"      : "default",
		"passes"    : [{
            "name"           : "default",
			"vertexShader"   : "#pragma include \"Line.vertex.glsl\"",
			"fragmentShader" : "#pragma include \"Line.fragment.glsl\""
		}]
	}]
}
