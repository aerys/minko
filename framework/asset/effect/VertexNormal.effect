{
	"name" : "normal",

	"attributes" : {
		"aPosition"		: "geometry[${geometryUuid}].position",
		"aNormal"		: "geometry[${geometryUuid}].normal",
		"aBoneIdsA"		: "geometry[${geometryUuid}].boneIdsA",
		"aBoneIdsB"		: "geometry[${geometryUuid}].boneIdsB",		
		"aBoneWeightsA"	: "geometry[${geometryUuid}].boneWeightsA",
		"aBoneWeightsB"	: "geometry[${geometryUuid}].boneWeightsB",
        "aPopProtected" : "geometry[${geometryUuid}].popProtected"
	},

	"uniforms" : {
        "uModelToWorldMatrix"	: "modelToWorldMatrix",
		"uWorldToScreenMatrix"	: { "binding" : { "property" : "worldToScreenMatrix", "source" : "renderer" } },
		"uBoneMatrices[0]"		: "geometry[${geometryUuid}].boneMatrices",
		"uNumBones"				: "geometry[${geometryUuid}].numBones",
        "uPopLod"               : "surface[${surfaceUuid}].popLod",
        "uPopBlendingLod"       : "surface[${surfaceUuid}].popBlendingLod",
        "uPopFullPrecisionLod"  : "geometry[${geometryUuid}].popFullPrecisionLod",
        "uPopMinBound"          : "geometry[${geometryUuid}].popMinBound",
        "uPopMaxBound"          : "geometry[${geometryUuid}].popMaxBound"
	},

	"macros" : {
		"MODEL_TO_WORLD"		: "modelToWorldMatrix",
		"SKINNING_NUM_BONES"	: { "binding" : "geometry[$geometryUuid].numBones", "type" : "int" },
        "POP_LOD_ENABLED"       : "surface[${surfaceUuid}].popLodEnabled",
        "POP_BLENDING_ENABLED"  : "surface[${surfaceUuid}].popBlendingEnabled",
        "VERTEX_POP_PROTECTED"  : "geometry[${geometryUuid}].popProtected"
	},

    "techniques" : [{
    	"name"		: "default", 
    	"passes"	: [{
    		"name"			: "normal-pass",
		    "vertexShader" 	: "
                #ifdef GL_ES
                    #ifdef GL_FRAGMENT_PRECISION_HIGH
                        precision highp float;
                    #else
                        precision mediump float;
                    #endif
                #endif

                #ifdef MODEL_TO_WORLD
			    uniform mat4 uModelToWorldMatrix;
                #endif
                
			    uniform mat4 uWorldToScreenMatrix;

			    attribute vec3 aPosition;
			    attribute vec3 aNormal;

				#ifdef SKINNING_NUM_BONES
				attribute vec4 aBoneWeightsA;
				attribute vec4 aBoneWeightsB;
				#endif

                #ifdef VERTEX_POP_PROTECTED
                attribute float aPopProtected;
                #endif

                #ifdef POP_LOD_ENABLED
                uniform float uPopLod;
                #ifdef POP_BLENDING_ENABLED
                uniform float uPopBlendingLod;
                #endif
                uniform float uPopFullPrecisionLod;
                uniform vec3 uPopMinBound;
                uniform vec3 uPopMaxBound;
                #endif

			    varying vec3 worldNormal;

			    #pragma include \"Skinning.function.glsl\"
			    #pragma include \"Pop.function.glsl\"

			    void main(void)
			    {
				    vec4 pos = vec4(aPosition, 1.0);
					vec4 n = normalize(vec4(aNormal, 0.0)); 

				
				    #ifdef SKINNING_NUM_BONES
					    pos = skinning_moveVertex(pos, aBoneWeightsA, aBoneWeightsB);
					    n = skinning_moveVertex(n, aBoneWeightsA, aBoneWeightsB);
				    #endif // SKINNING_NUM_BONES

                    #ifdef POP_LOD_ENABLED
                        float popProtected = 0.0;

                        #ifdef VERTEX_POP_PROTECTED
                            popProtected = aPopProtected;
                        #endif // VERTEX_POP_PROTECTED

                        #ifdef POP_BLENDING_ENABLED
                            pos = pop_blend(pos, vec3(0.0), uPopLod, uPopBlendingLod, uPopFullPrecisionLod, uPopMinBound, uPopMaxBound, popProtected);
                        #else
                            pos = pop_quantize(pos, vec3(0.0), uPopLod, uPopFullPrecisionLod, uPopMinBound, uPopMaxBound, popProtected);
                        #endif // POP_BLENDING_ENABLED
                    #endif // POP_LOD_ENABLED

					worldNormal	= normalize(n.xyz);

				    #ifdef MODEL_TO_WORLD
					    pos = uModelToWorldMatrix * pos;
					    worldNormal	= mat3(uModelToWorldMatrix) * worldNormal;
				    #endif // MODEL_TO_WORLD

				    gl_Position =  uWorldToScreenMatrix * pos;
			    }
		    ",
		    "fragmentShader" : "
                #ifdef GL_ES
                    #ifdef GL_FRAGMENT_PRECISION_HIGH
                        precision highp float;
                    #else
                        precision mediump float;
                    #endif
                #endif

			    varying vec3 worldNormal;

			    void main(void)
			    {
				    gl_FragColor = vec4((normalize(worldNormal.xyz) + 1.0) * 0.5, 1.0);
			    }
		    "
	    }]
    }]
}
