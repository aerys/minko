<?xml version="1.0"?>
<!DOCTYPE doc SYSTEM "DevilDoc.dtd"><!-- Matrixes are expressed like a matrix, the scale and offset -->

<doc>
  <set name="IL">
    <entity type="function">
      <name>ilActiveImage</name>
      <return>ILboolean</return>
      <param description="Animation numer to select as current." name="Number" type="ILuint" />ma
			<description>ilActiveImage sets the current image to be an image in an animation chain</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INTERNAL_ERROR" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilActiveMipmap" />
        <a from="IL" name="ilActiveLayer" />
        <a from="IL" name="ilGenImages" />
      </link>
    </entity>
    <entity type="function">
      <name>ilActiveMipmap</name>
      <return>ILboolean</return>
      <param description="Mipmap level to select as current." name="Number" type="ILuint" />
      <description>ilActiveMipmap sets a mipmap of the image as the current mipmap. Currently, the only way to generate mipmaps is by calling iluBuildMipmaps. If neither function has been called for the current image, no mipmaps exist for it. If Number is 0, then the current base image is set.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INTERNAL_ERROR" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilActiveImage" />
        <a from="ILU" name="iluBuildMipmaps" />
        <a from="IL" name="ilActiveLayer" />
      </link>
    </entity>
    <entity type="function">
      <name>ilBindImage</name>
      <return>ILvoid</return>
      <param description="The name of an image." name="Image" type="ILuint" />
      <description>The ilBindImage function creates a named image. Image names are ILuint&apos;s, with zero being reserved as the default image. The default image is generated by ilCreateDefaultTex. The only reason the default image would be NULL is if OpenIL could not create the default image, due to memory constraints of the system, so always heed the IL_OUT_OF_MEMORY error. Any dimension image may be bound with ilBindImage. When ilBindImage is called, the bound image remains bound until ilBindImage is called again with a different value in Image.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilDeleteImages" />
        <a from="IL" name="ilCreateDefaultTex" />
        <a from="IL" name="ilGetError" />
      </link>
    </entity>
    <entity type="function">
      <name>ilClearImage</name>
      <return>ILboolean</return>
      <description>ilClearImage simply clears the image to the colours specified in ilClearColour. If the current image is of format IL_COLOR_INDEX, the image is cleared to all zeros, and the palette is changed to one entry of all zeros. If the current image is of format IL_LUMINANCE, the image is cleared to all zeros.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilClearColour" />
      </link>
    </entity>
    <entity type="function">
      <name>ilConvertImage</name>
      <return>ILboolean</return>
      <param description="The format the current image should be converted to." name="DestFormat" type="ILenum" />
      <param description="The type the current image should be converted to." name="DestType" type="ILenum" />
      <description>ilConvertImage converts the current bound image from its format/type to DestFormat and DestType. Almost all conversions are allowable.</description>
      <link name="Formats" verbose="true">
        <a name="IL_RGB" description="" />
        <a name="IL_RGBA" description="" />
        <a name="IL_BGR" description="" />
        <a name="IL_BGRA" description="" />
        <a name="IL_LUMINANCE" description="" />
        <a name="IL_LUMINANCE_ALPHA" description="" />
        <a name="IL_COLOUR_INDEX" description="" />
      </link>
      <link name="Types" verbose="true">
        <a name="IL_BYTE" description="" />
        <a name="IL_UNSIGNED_BYTE" description="" />
        <a name="IL_SHORT" description="" />
        <a name="IL_UNSIGNED_SHORT" description="" />
        <a name="IL_INT" description="" />
        <a name="IL_UNSIGNED_INT" description="" />
        <a name="IL_FLOAT" description="" />
        <a name="IL_DOUBLE" description="" />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INVALID_CONVERSION" description="DestFormat and/or DestType was an invalid identifier." />
        <a from="IL" name="IL_OUT_OF_MEMORY" description="Could not allocate memory for the converted image data." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="IL" name="ilConvertPal" />
      </link>
    </entity>
    <entity type="function">
      <name>ilCopyImage</name>
      <return>ILboolean</return>
      <param description="Name of an image to copy to the current image." name="Src" type="ILuint" />
      <description>ilCopyImage copies the attributes and data from the image named in Src. The same image bound before calling ilCopyImage remains bound afterward.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_OUT_OF_MEMORY" description="Could not allocate memory for the converted image data." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilCopyPixels</name>
      <return>ILvoid</return>
      <param description="Where to begin copying pixels from in the x direction." name="XOff" type="ILuint" />
      <param description="Where to begin copying pixels from in the y direction." name="YOff" type="ILuint" />
      <param description="Where to begin copying pixels from in the z direction." name="ZOff" type="ILuint" />
      <param description="How many pixels to copy in the x direction." name="Width" type="ILuint" />
      <param description="How many pixels to copy in the y direction." name="Height" type="ILuint" />
      <param description="How many pixels to copy in the z direction." name="Depth" type="ILuint" />
      <param description="The desired format the output should be." name="Format" type="ILenum" />
      <param description="The desired type the output should be." name="Type" type="ILenum" />
      <param description="User-defined buffer to copy the image data to." name="Data" type="ILvoid *" />
      <description>ilCopyPixels has very simple behaviour. It simply copies a block of pixels from the current image to the Data buffer. XOff, YOff and ZOff can be used to skip a certain number of pixels in each respective direction. If XOff + Width, YOff + Height and/or ZOff + Depth is greater than the current image&apos;s width, height or depth, only the current image&apos;s width, height or depth number of pixels will be copied to Data.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" description="Format did not match the current image&apos;s format. Use ilGetInteger to obtain the current image&apos;s format." name="IL_INVALID_CONVERSION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetInteger" />
      </link>
    </entity>
    <entity type="function">
      <name>ilDefaultImage</name>
      <return>ILboolean</return>
      <description>ilDefaultImage creates an ugly 64x64 image of 8x8 black and yellow squares to form a checkerboard pattern. In future versions of OpenIL, there may be an option that will load this image if an image-loading function failed (unless memory could not be allocated). This way, the user can easily tell if an image was not loaded. Plus, the calling program can continue normally, even though it will have an ugly image. ;-)</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilDeleteImages</name>
      <return>ILvoid</return>
      <param description="Number of image names to delete." name="Num" type="ILsizei" />
      <param description="Pointer to image names to delete." name="Images" type="const ILuint *" />
      <description>ilDeleteImages deletes Num image names specified in Images. After a texture is deleted, its characteristics and dimensions are undefined, and the name may be reused byilGenImages. ilDeleteImages ignores zeros and out-of-bounds image names. If the current image is deleted, the binding reverts to the default image (image name of 0).</description>
      <link name="Errors" verbose="true">
        <a from="IL" description="Num was less than one." name="IL_INVALID_VALUE" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilEnable</name>
      <return>ILboolean</return>
      <param description="Mode to enable." name="Mode" type="ILenum" />
      <description>ilEnable enables a mode specified by Mode. This function is identical to it&apos;s OpenGL counterpart glEnable.</description>
      <link name="Modes" verbose="true">
        <a from="IL" description="When enabled, the origin is specified at an absolute position, and all images loaded or saved adhere to this set origin. For more information, check out ilOriginFunc." name="IL_ORIGIN_SET" />
        <a from="IL" description="If enabled while saving, OpenIL will overwrite existing files, else IL_FILE_ALREADY_EXISTS is set, and the image is not saved." name="IL_FILE_OVERWRITE" />
        <a description="When enabled, OpenIL automatically converts palette&apos;d images to their base types, e.g. converting to a bgra image." from="IL" name="IL_CONV_PAL" />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" description="Invalid Mode value." name="IL_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilDisable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="IL" name="ilOriginFunc" />
      </link>
    </entity>
    <entity type="function">
      <name>ilDisable</name>
      <return>ILboolean</return>
      <param description="Mode to disable." name="Mode" type="ILenum" />
      <description>ilDisable disables a mode specified by Mode. This function is identical to it&apos;s OpenGL counterpart glDisable.</description>
      <link name="Modes" verbose="true">
        <a from="IL" description="When enabled, the origin is specified at an absolute position, and all images loaded or saved adhere to this set origin. For more information, check out ilOriginFunc." name="IL_ORIGIN_SET" />
        <a from="IL" description="If enabled while saving, OpenIL will overwrite existing files, else IL_FILE_ALREADY_EXISTS is set, and the image is not saved." name="IL_FILE_OVERWRITE" />
        <a from="IL" description="When enabled, OpenIL automatically converts palette&apos;d images to their base types, e.g. converting to a bgra image." name="IL_CONV_PAL" />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" description="Invalid Mode value." name="IL_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="IL" name="ilOriginFunc" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGenImages</name>
      <return>ILvoid</return>
      <param description="Number of image names to generate." name="Num" type="ILsizei" />
      <param description="Pointer in which the generated image names are stored." name="Images" type="ILuint *" />
      <description>ilGenImages stores Num image names in Images. The names stored are not necessarily contiguous, and names can have been deleted via ilDeleteImages beforehand. The image names stored in Images can be used with ilBindImage after calling ilGenImages. After calling ilGenImages, all image dimensions and features are undefined.</description>
      <link name="Errors" verbose="true">
        <a from="IL" description="Num was less than 1 or Images was NULL." name="IL_INVALID_VALUE" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilDeleteImages" />
      </link>
    </entity>
        <entity type="function">
      <name>ilDeleteImage</name>
      <return>ILvoid</return>
      <param name="Id" type="ILuint" description="The image name to delete" />
      <description>ilDeleteImage is a convenience function to delete a single image instead of calling ilDeleteImages</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_INVALID_VALUE" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL"  name="ilGenImages" />
        <a from="IL"  name="ilDeleteImages" />
        <a from="IL"  name="ilGenImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGenImage</name>
      <return>ILvoid</return>
      <param name="Id" type="ILuint" description="The image name to delete" />
      <description>ilGenImage is a convenience function to delete a single image instead of calling ilGenImages</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilDeleteImages" />
        <a from="IL" name="ilDeleteImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetBoolean</name>
      <return>ILboolean</return>
      <param description="The mode value to be returned." name="Mode" type="ILenum" />
      <description>ilGetBoolean returns the value of a selected mode.</description>
      <link name="Modes" verbose="true">
        <a from="IL" description="Returns whether file overwriting when saving is enabled." name="IL_FILE_MODE" />
        <a from="IL" description="Returns whether palette&apos;d images are converted to their base palettes types on load - e.g. converted to a bgra image." name="IL_CONV_PAL" />
        <a from="IL" description="Returns whether all images loaded and saved adhere to a specific origin." name="IL_ORIGIN_SET" />
        <a from="IL" description="Returns the current origin position." name="IL_ORIGIN_MODE" />
        <a from="IL" description="Returns whether all images loaded are converted to a specific format." name="IL_FORMAT_SET" />
        <a from="IL" description="Returns the format images are converted to upon loading." name="IL_FORMAT_MODE" />
        <a from="IL" description="Returns whether all images loaded are converted to a specific type." name="IL_TYPE_SET" />
        <a from="IL" description="Returns the type images are converted to upon loading." name="IL_TYPE_MODE" />
        <a from="IL" description="Returns the version number of the shared library. This can be checked against the IL_VERSION #define." name="IL_VERSION_NUM" />
        <a from="IL" description="Returns the current image&apos;s width." name="IL_IMAGE_WIDTH" />
        <a from="IL" description="Returns the current image&apos;s height." name="IL_IMAGE_HEIGHT" />
        <a from="IL" description="Returns the bytes per pixel of the current image&apos;s data." name="IL_IMAGE_BYTES_PER_PIXEL" />
        <a from="IL" description="Returns the bits per pixel of the current image&apos;s data." name="IL_IMAGE_BITS_PER_PIXEL" />
        <a from="IL" description="Returns the current image&apos;s format." name="IL_IMAGE_FORMAT" />
        <a from="IL" description="Returns the current image&apos;s type." name="IL_IMAGE_TYPE" />
        <a from="IL" description="Returns the number of images in the current image animation chain." name="IL_NUM_IMAGES" />
        <a from="IL" description="Returns the number of mipmaps of the current image." name="IL_NUM_MIPMAPS" />
        <a from="IL" description="Returns the palette type of the current image." name="IL_PALETTE_TYPE" />
        <a from="IL" description="Returns the bytes per pixel of the current image&apos;s palette." name="IL_PALETTE_BPP" />
        <a from="IL" description="Returns the number of colours of the current image&apos;s palette." name="IL_PALETTE_NUM_COLS" />
        <a from="IL" description="Returns the current image number." name="IL_ACTIVE_IMAGE" />
        <a from="IL" description="Returns the current layer number." name="IL_ACTIVE_LAYER" />
        <a from="IL" description="Returns the current mipmap number." name="IL_ACTIVE_MIPMAP" />
        <a from="IL" description="Returns the current bound image name." name="IL_CUR_IMAGE" />
        <a from="IL" description="Returns whether OpenIL uses a key colour (not used yet)." name="IL_USE_KEY_COLOUR" />
      </link>
      <link name="Errors" verbose="true">
        <a description="Mode was an invalid enum." name="IL_INVALID_ENUM" />
        <a description="Param was NULL." name="IL_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="IL" name="ilOriginFunc" />
        <a from="IL" name="ilSetInteger" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetBooleanv</name>
      <return>ILvoid</return>
      <param description="The mode value to be returned." name="Mode" type="ILenum" />
      <param description="Array where the values are stored" name="Param" type="ILboolean *" />
      <description>ilGetBooleanv function returns the mode value in the Param parameter.</description>
      <link name="Modes" verbose="true">
        <a from="IL" description="Returns whether file overwriting when saving is enabled." name="IL_FILE_MODE" />
        <a from="IL" description="Returns whether palette&apos;d images are converted to their base palettes types on load - e.g. converted to a bgra image." name="IL_CONV_PAL" />
        <a from="IL" description="Returns whether all images loaded and saved adhere to a specific origin." name="IL_ORIGIN_SET" />
        <a from="IL" description="Returns the current origin position." name="IL_ORIGIN_MODE" />
        <a from="IL" description="Returns whether all images loaded are converted to a specific format." name="IL_FORMAT_SET" />
        <a from="IL" description="Returns the format images are converted to upon loading." name="IL_FORMAT_MODE" />
        <a from="IL" description="Returns whether all images loaded are converted to a specific type." name="IL_TYPE_SET" />
        <a from="IL" description="Returns the type images are converted to upon loading." name="IL_TYPE_MODE" />
        <a from="IL" description="Returns the version number of the shared library. This can be checked against the IL_VERSION #define." name="IL_VERSION_NUM" />
        <a from="IL" description="Returns the current image&apos;s width." name="IL_IMAGE_WIDTH" />
        <a from="IL" description="Returns the current image&apos;s height." name="IL_IMAGE_HEIGHT" />
        <a from="IL" description="Returns the bytes per pixel of the current image&apos;s data." name="IL_IMAGE_BYTES_PER_PIXEL" />
        <a from="IL" description="Returns the bits per pixel of the current image&apos;s data." name="IL_IMAGE_BITS_PER_PIXEL" />
        <a from="IL" description="Returns the current image&apos;s format." name="IL_IMAGE_FORMAT" />
        <a from="IL" description="Returns the current image&apos;s type." name="IL_IMAGE_TYPE" />
        <a from="IL" description="Returns the number of images in the current image animation chain." name="IL_NUM_IMAGES" />
        <a from="IL" description="Returns the number of mipmaps of the current image." name="IL_NUM_MIPMAPS" />
        <a from="IL" description="Returns the palette type of the current image." name="IL_PALETTE_TYPE" />
        <a from="IL" description="Returns the bytes per pixel of the current image&apos;s palette." name="IL_PALETTE_BPP" />
        <a from="IL" description="Returns the number of colours of the current image&apos;s palette." name="IL_PALETTE_NUM_COLS" />
        <a from="IL" description="Returns the current image number." name="IL_ACTIVE_IMAGE" />
        <a from="IL" description="Returns the current layer number." name="IL_ACTIVE_LAYER" />
        <a from="IL" description="Returns the current mipmap number." name="IL_ACTIVE_MIPMAP" />
        <a from="IL" description="Returns the current bound image name." name="IL_CUR_IMAGE" />
        <a from="IL" description="Returns whether OpenIL uses a key colour (not used yet)." name="IL_USE_KEY_COLOUR" />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" description="Mode was an invalid enum." name="IL_INVALID_ENUM" />
        <a from="IL" description="Param was NULL." name="IL_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="IL" name="ilOriginFunc" />
        <a from="IL" name="ilSetInteger" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetIntegerv</name>
      <return>ILvoid</return>
      <param description="The mode value to be returned." name="Mode" type="ILenum" />
      <param description="Array where the values are stored" name="Param" type="ILboolean *" />
      <description>ilGetIntegerv function returns the mode value in the Param parameter.</description>
      <link name="" verbose="true">
        <a description="Returns whether file overwriting when saving is enabled." name="IL_FILE_MODE" />
        <a description="Returns whether palette&apos;d images are converted to their base palettes types on load - e.g. converted to a bgra image." name="IL_CONV_PAL" />
        <a description="Returns whether all images loaded and saved adhere to a specific origin." name="IL_ORIGIN_SET" />
        <a description="Returns the current origin position." name="IL_ORIGIN_MODE" />
        <a description="Returns whether all images loaded are converted to a specific format." name="IL_FORMAT_SET" />
        <a description="Returns the format images are converted to upon loading." name="IL_FORMAT_MODE" />
        <a description="Returns whether all images loaded are converted to a specific type." name="IL_TYPE_SET" />
        <a description="Returns the type images are converted to upon loading." name="IL_TYPE_MODE" />
        <a description="Returns the version number of the shared library. This can be checked against the IL_VERSION #define." name="IL_VERSION_NUM" />
        <a description="Returns the current image&apos;s width." name="IL_IMAGE_WIDTH" />
        <a description="Returns the current image&apos;s height." name="IL_IMAGE_HEIGHT" />
        <a description="Returns the bytes per pixel of the current image&apos;s data." name="IL_IMAGE_BYTES_PER_PIXEL" />
        <a description="Returns the bits per pixel of the current image&apos;s data." name="IL_IMAGE_BITS_PER_PIXEL" />
        <a description="Returns the current image&apos;s format." name="IL_IMAGE_FORMAT" />
        <a description="Returns the current image&apos;s type." name="IL_IMAGE_TYPE" />
        <a description="Returns the number of images in the current image animation chain." name="IL_NUM_IMAGES" />
        <a description="Returns the number of mipmaps of the current image." name="IL_NUM_MIPMAPS" />
        <a description="Returns the palette type of the current image." name="IL_PALETTE_TYPE" />
        <a description="Returns the bytes per pixel of the current image&apos;s palette." name="IL_PALETTE_BPP" />
        <a description="Returns the number of colours of the current image&apos;s palette." name="IL_PALETTE_NUM_COLS" />
        <a description="Returns the current image number." name="IL_ACTIVE_IMAGE" />
        <a description="Returns the current layer number." name="IL_ACTIVE_LAYER" />
        <a description="Returns the current mipmap number." name="IL_ACTIVE_MIPMAP" />
        <a description="Returns the current bound image name." name="IL_CUR_IMAGE" />
        <a description="Returns whether OpenIL uses a key colour (not used yet)." name="IL_USE_KEY_COLOUR" />
      </link>
      <link name="Errors" verbose="true">
        <a description="Mode was an invalid enum." name="IL_INVALID_ENUM" />
        <a description="Param was NULL." name="IL_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilSetInteger" />
        <a from="IL" name="ilOriginFunc" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetInteger</name>
      <return>ILint</return>
      <param description="The mode value to be returned." name="Mode" type="ILenum" />
      <description>ilGetInteger returns the value of a selected mode.</description>
      <link name="Modes" verbose="true">
        <a description="Returns whether file overwriting when saving is enabled." name="IL_FILE_MODE" />
        <a description="Returns whether palette&apos;d images are converted to their base palettes types on load - e.g. converted to a bgra image." name="IL_CONV_PAL" />
        <a description="Returns whether all images loaded and saved adhere to a specific origin." name="IL_ORIGIN_SET" />
        <a description="Returns the current origin position." name="IL_ORIGIN_MODE" />
        <a description="Returns whether all images loaded are converted to a specific format." name="IL_FORMAT_SET" />
        <a description="Returns the format images are converted to upon loading." name="IL_FORMAT_MODE" />
        <a description="Returns whether all images loaded are converted to a specific type." name="IL_TYPE_SET" />
        <a description="Returns the type images are converted to upon loading." name="IL_TYPE_MODE" />
        <a description="Returns the version number of the shared library. This can be checked against the IL_VERSION #define." name="IL_VERSION_NUM" />
        <a description="Returns the current image&apos;s width." name="IL_IMAGE_WIDTH" />
        <a description="Returns the current image&apos;s height." name="IL_IMAGE_HEIGHT" />
        <a description="Returns the bytes per pixel of the current image&apos;s data." name="IL_IMAGE_BYTES_PER_PIXEL" />
        <a description="Returns the bits per pixel of the current image&apos;s data." name="IL_IMAGE_BITS_PER_PIXEL" />
        <a description="Returns the current image&apos;s format." name="IL_IMAGE_FORMAT" />
        <a description="Returns the current image&apos;s type." name="IL_IMAGE_TYPE" />
        <a description="Returns the number of images in the current image animation chain." name="IL_NUM_IMAGES" />
        <a description="Returns the number of mipmaps of the current image." name="IL_NUM_MIPMAPS" />
        <a description="Returns the palette type of the current image." name="IL_PALETTE_TYPE" />
        <a description="Returns the bytes per pixel of the current image&apos;s palette." name="IL_PALETTE_BPP" />
        <a description="Returns the number of colours of the current image&apos;s palette." name="IL_PALETTE_NUM_COLS" />
        <a description="Returns the current image number." name="IL_ACTIVE_IMAGE" />
        <a description="Returns the current layer number." name="IL_ACTIVE_LAYER" />
        <a description="Returns the current mipmap number." name="IL_ACTIVE_MIPMAP" />
        <a description="Returns the current bound image name." name="IL_CUR_IMAGE" />
        <a description="Returns whether OpenIL uses a key colour (not used yet)." name="IL_USE_KEY_COLOUR" />
      </link>
      <link name="Errors" verbose="true">
        <a description="Mode was an invalid enum." name="IL_INVALID_ENUM" />
        <a description="Param was NULL." name="IL_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="IL" name="ilOriginFunc" />
        <a from="IL" name="ilSetInteger" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetError</name>
      <return>ILenum</return>
      <param description="The mode value to be returned." name="Mode" type="ILenum" />
      <description>ilGetError returns the value of the last error on the error stack. If no error has occurred, IL_NO_ERROR is returned. Initially, the error stack is set to IL_NO_ERROR. When ilGetError is called, the last error on the error stack is &quot;popped off&quot;. Errors that occur in ILU and ILUT are also reported through ilGetError. ilGetError only returns something other than IL_NO_ERROR if detectable errors have occurred.</description>
      <link name="Returned Errors" verbose="true">
        <a description="No detectable error has occured." name="IL_NO_ERROR" />
        <a description="An unacceptable enumerated value was passed to a function." name="IL_INVALID_ENUM" />
        <a description="An unacceptable enumerated value was passed to a function." name="ILU_INVALID_ENUM" />
        <a description="An unacceptable enumerated value was passed to a function." name="ILUT_INVALID_ENUM" />
        <a description="Could not allocate enough memory in an operation." name="IL_OUT_OF_MEMORY" />
        <a description="Could not allocate enough memory in an operation." name="ILU_OUT_OF_MEMORY" />
        <a description="Could not allocate enough memory in an operation." name="ILUT_OUT_OF_MEMORY" />
        <a description="The format a function tried to use was not able to be used by that function." name="IL_FORMAT_NOT_SUPPORTED" />
        <a description="A serious error has occurred. Please e-mail an admin with the conditions leading up to this error being reported." name="IL_INTERNAL_ERROR" />
        <a description="A serious error has occurred. Please e-mail an admin with the conditions leading up to this error being reported." name="ILU_INTERNAL_ERROR" />
        <a description="An invalid value was passed to a function or was in a file." name="IL_INVALID_VALUE" />
        <a description="An invalid value was passed to a function or was in a file." name="ILU_INVALID_VALUE" />
        <a description="An invalid value was passed to a function or was in a file." name="ILUT_INVALID_VALUE" />
        <a description="The operation attempted is not allowable in the current state. The function returns with no ill side effects." name="IL_ILLEGAL_OPERATION" />
        <a description="The operation attempted is not allowable in the current state. The function returns with no ill side effects." name="ILU_ILLEGAL_OPERATION" />
        <a description="The operation attempted is not allowable in the current state. The function returns with no ill side effects." name="ILUT_ILLEGAL_OPERATION" />
        <a description="An illegal value was found in a file trying to be loaded." name="IL_ILLEGAL_FILE_VALUE" />
        <a description="A file&apos;s header was incorrect." name="IL_INVALID_FILE_HEADER" />
        <a description="An invalid parameter was passed to a function, such as a NULL pointer." name="IL_INVALID_PARAM" />
        <a description="An invalid parameter was passed to a function, such as a NULL pointer." name="ILU_INVALID_PARAM" />
        <a description="An invalid parameter was passed to a function, such as a NULL pointer." name="ILUT_INVALID_PARAM" />
        <a description="Could not open the file specified. The file may already be open by another app or may not exist." name="IL_COULD_NOT_OPEN_FILE" />
        <a description="Could not open the file specified. The file may already be open by another app or may not exist." name="ILUT_COULD_NOT_OPEN_FILE" />
        <a description="The extension of the specified filename was not correct for the type of image-loading function." name="IL_INVALID_EXTENSION" />
        <a description="The filename specified already belongs to another file. To overwrite files by default read more at ilEnable function." name="IL_FILE_ALREADY_EXISTS" />
        <a description="Tried to convert an image from its format to the same format." name="IL_OUT_FORMAT_SAME" />
        <a description="One of the internal stacks was already filled, and the user tried to add on to the full stack." name="IL_STACK_OVERFLOW" />
        <a description="One of the internal stacks was already filled, and the user tried to add on to the full stack." name="ILUT_STACK_OVERFLOW" />
        <a description="One of the internal stacks was empty, and the user tried to empty the already empty stack." name="IL_STACK_UNDERFLOW" />
        <a description="One of the internal stacks was empty, and the user tried to empty the already empty stack." name="ILUT_STACK_UNDERFLOW" />
        <a description="An invalid conversion attempt was tried." name="IL_INVALID_CONVERSION" />
        <a description="An error occurred in the libjpeg library." name="IL_LIB_JPEG_ERROR" />
        <a description="An error occurred in the libpng library." name="IL_LIB_PNG_ERROR" />
        <a description="No function sets this yet, but it is possible (not probable) it may be used in the future." name="IL_UNKNOWN_ERROR" />
        <a description="A type is valid but not supported in the current build." name="ILUT_NOT_SUPPORTED" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetString</name>
      <return>const char *</return>
      <description>ilGetString returns a constant human-readable string describing the current OpenIL implementation.</description>
      <param description="Describes the string to be retrieved." name="StringName" type="ILenum" />
      <link name="Strings" verbose="true">
        <a description="Describes the OpenIL vendor (currently Abysmal Software)." name="IL_VENDOR" />
        <a description="String describing the current OpenIL version. Use ilGetInteger with IL_VERSION_NUM to actually check for version differences." name="IL_VERSION" />
      </link>
      <link name="Errors" verbose="true">
        <a description="StringName was an invalid value." name="IL_INVALID_ENUM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilIsEnabled</name>
      <return>ILboolean</return>
      <description>ilIsEnabled returns whether the mode indicated by Mode is enabled.</description>
      <param description="Indicates an OpenIL mode" name="Mode" type="ILenum" />
      <link name="Modes" verbose="true">
        <a description="Whether the origin is set." name="IL_ORIGIN_SET" />
        <a description="Whether OpenIL is allowed to overwrite existing files when saving." name="IL_FILE_OVERWRITE" />
        <a description="Whether OpenIL should automatically convert palette&apos;d images to truecolour images." name="IL_CONV_PAL" />
      </link>
      <link name="Errors" verbose="true">
        <a description="Mode was of an invalid value." name="IL_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilDisable" />
        <a from="IL" name="ilIsDisabled" />
        <a from="IL" name="ilOriginFunc" />
        <a from="ILUT" name="ilutIsEnabled" />
        <a from="ILUT" name="ilutIsDisabled" />
      </link>
    </entity>
    <entity type="function">
      <name>ilIsDisabled</name>
      <return>ILboolean</return>
      <description>ilIsDisabled returns whether the mode indicated by Mode is disabled.</description>
      <param description="Indicates an OpenIL mode" name="Mode" type="ILenum" />
      <link name="Modes" verbose="true">
        <a description="Whether the origin is set." name="IL_ORIGIN_SET" />
        <a description="Whether OpenIL is allowed to overwrite existing files when saving." name="IL_FILE_OVERWRITE" />
        <a description="Whether OpenIL should automatically convert palette&apos;d images to truecolour images." name="IL_CONV_PAL" />
      </link>
      <link name="Errors" verbose="true">
        <a description="Mode was of an invalid value." name="IL_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilDisable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilOriginFunc" />
        <a from="ILUT" name="ilutIsEnabled" />
        <a from="ILUT" name="ilutIsDisabled" />
      </link>
    </entity>
    <entity type="function">
      <name>ilOriginFunc</name>
      <return>ILboolean</return>
      <description>ilOriginFunc sets the origin to be used when loading all images, so that any image with a different origin will be flipped to have the set origin. This behaviour is actually disabled by default but can be enabled using ilEnable with the IL_ORIGIN_SET parameter.</description>
      <param description="Specifies the origin to be used" name="Mode" type="ILenum" />
      <link name="Modes" verbose="true">
        <a description="The origin is in the lower left of the image." name="IL_ORIGIN_LOWER_LEFT" />
        <a description="The origin is in the upper left of the image." name="IL_ORIGIN_UPPER_LEFT" />
      </link>
      <link name="Errors" verbose="true">
        <a description="Mode was of an invalid value." name="IL_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoad" />
        <a from="IL" name="ilLoadF" />
        <a from="IL" name="ilLoadL" />
        <a from="IL" name="ilLoadImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilLoadImage</name>
      <return>ILboolean</return>
      <description>The ilLoadImage function allows a general interface to the specific internal file-loading routines. The approach ilLoadImage takes toward determining image types is three-pronged. First, it finds the extension and checks to see if any user-registered functions (registered through ilRegisterLoad) match the extension. If nothing matches, it takes the extension and determines which function to call based on it. Lastly, it attempts to identify the image based on various image header verification functions, such as ilIsValidPngF. If all this checking fails, IL_FALSE is returned with no modification to the current bound image.</description>
      <param description="Specifies which file to load an image from." name="FileName" type="char *" />
      <link name="Errors" verbose="true">
        <a from="IL" description="The file pointed to by FileName could not be opened. Either the file does not exist or may be in use by another process." name="IL_COULD_NOT_OPEN_FILE" />
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" description="The file could not be loaded based on extension or header." name="IL_INVALID_EXTENSION" />
        <a from="IL" description="FileName was not valid. It was most likely NULL." name="IL_INVALID_PARAM" />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="IL" name="ilLoad" />
        <a from="IL" name="ilLoadF" />
        <a from="IL" name="ilLoadL" />
        <a from="IL" name="ilLoadPal" />
      </link>
    </entity>
    <entity type="function">
      <name>ilPopAttrib</name>
      <return>ILvoid</return>
      <description>ilPopAttrib pops the last pushed stack entry off the stack and copies the bits specified when pushed by ilPushAttrib to the previous set of states.</description>
      <link name="Errors" verbose="true">
        <a description="The stack was popped without being pushed by ilPushAttrib." name="IL_STACK_UNDERFLOW" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilPushAttrib" />
      </link>
    </entity>
    <entity type="function">
      <name>ilPushAttrib</name>
      <return>ILvoid</return>
      <description>ilPushAttrib pushes a new set of modes and attributes onto the state stack, allowing for &quot;a fresh start&quot;.</description>
      <param description="Attribute bits to push." name="Bits" type="ILuint" />
      <link name="Bits" verbose="true">
        <a description="Preserves the origin state set by ilOriginFunc." name="IL_ORIGIN_BIT" />
        <a description="Preserves whether OpenIL is allowed to overwrite files when saving (set by ilEnable, ilDisable)." name="IL_FILE_BIT" />
        <a description="Preserves whether OpenIL is supposed to convert palette&apos;d to truecolour images (set by ilEnable, ilDisable)." name="IL_PAL_BIT" />
        <a description="Preserves all OpenIL states and attributes." name="IL_ALL_ATTRIB_BITS" />
      </link>
      <link name="Errors" verbose="true">
        <a description="The stack was pushed more times than the current OpenIL implementation allows. Use ilPopAttrib to clear the stack. OpenIL implementations must support a stack depth of at least 32." name="IL_STACK_OVERFLOW" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilPushAttrib" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSaveImage</name>
      <return>ILboolean</return>
      <description>The ilSaveImage function allows a general interface to the specific internal file saving routines. Based on the extension, OpenIL will save that type of file (e.g. Targa file saved when the extension is &quot;tga&quot;).</description>
      <param description="Specifies which file to save an image to" name="FileName" type="char *" />
      <link name="Errors" verbose="true">
        <a description="Preserves the origin state set by ilOriginFunc." name="IL_COULD_NOT_OPEN_FILE" />
        <a description="Preserves whether OpenIL is allowed to overwrite files when saving (set by ilEnable, ilDisable)." name="IL_ILLEGAL_OPERATION" />
        <a description="Preserves whether OpenIL is supposed to convert palette&apos;d to truecolour images (set by ilEnable, ilDisable)." name="IL_INVALID_EXTENSION" />
        <a description="Preserves all OpenIL states and attributes." name="IL_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilLoad" />
        <a from="IL" name="ilLoadF" />
        <a from="IL" name="ilLoadL" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetRead</name>
      <return>ILvoid</return>
      <description>ilSetRead was primarily designed to allow languages other than C/C++ access to DevIL&apos;s file-reading functions, since other languages do not use stdio.h&apos;s FILE* struct. This function can also double usefully in instances where filetypes other than FILE* are used, such as Windows file handles and C++ istreams. Simply provide an alternative to each of the functions needed by DevIL. The &quot;special&quot; datatype ILHANDLE is passed to these functions when used, so any internal datatype used by the differing language (or file handle) can be used.</description>
      <param description="Pointer to a function to open a file." name="Open" type="fOpenRProc" />
      <param description="Pointer to a function to close a file." name="Close" type="fCloseRProc" />
      <param description="Pointer to a function that returns IL_TRUE if the end of file is reached." name="Eof" type="fEofProc" />
      <param description="Pointer to a function to return one byte from a file." name="Getc" type="fGetcProc" />
      <param description="Pointer to a function to read multiple bytes from a file." name="Read" type="fReadProc" />
      <param description="Pointer to a function to change position in a file." name="Seek" type="fSeekRProc" />
      <param description="Pointer to a function to report the position in a file." name="Tell" type="fTellRProc" />
      <link name="See Also" verbose="false">
        <a from="IL" name="ilSetWrite" />
        <a from="IL" name="ilResetRead" />
        <a from="IL" name="ilResetWrite" />
      </link>
    </entity>
    <entity type="function">
      <name>ilInit</name>
      <return>ILvoid</return>
      <description>ilInit starts DevIL and must be called prior to using DevIL, or else DevIL will probably crash when you attempt to use it.</description>
      <link name="See Also" verbose="false">
        <a from="ILU" name="iluInit" />
        <a from="ILUT" name="ilutInit" />
        <a from="IL" name="ilShutDown" />
      </link>
    </entity>
    <entity type="function">
      <name>ilTexImage</name>
      <return>ILboolean</return>
      <param description="Specifies the new image width. This cannot be 0." name="Width" type="ILuint" />
      <param description="Specifies the new image height. This cannot be 0." name="Height" type="ILuint" />
      <param description="Specifies the new image depth. Anything greater than 1 will make the image 3d. This cannot be 0." name="Depth" type="ILuint" />
      <param description="Specifies the new channels. Common values are 3 and 4." name="numberOfChannels" type="ILubyte" />
      <param description="Specifies the data format this image has. For a list of values this can be, see the See Also section." name="Format" type="ILenum" />
      <param description="Specifies the data format this image has. For a list of values this can be, see the See Also section." name="Type" type="ILenum" />
      <param description="Specifies data that should be copied to the new image. If this parameter is NULL, no data is copied, and the new image data consists of undefined values." name="Data" type="ILvoid *" />
      <description>Any current image data is destroyed by ilTexImage and replaced by a new image with the attributes specified. The new image data has undefined values. To set the new image data to a certain value, use ilClearImage or ilClearImageTo.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a description="One of the parameters provided was invalid. Width, Height, Depth or Bpp was an incorrect 0." name="IL_INVALID_PARAM" />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="ILU" name="ilGenImages" />
        <a from="ILUT" name="ilBindImage" />
        <a from="Constants" name="Data Formats" />
        <a from="Constants" name="Data Types" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetData</name>
      <return>ILboolean</return>
      <param description="Specifies the new image data to update the image with." name="Data" type="ILvoid *" />
      <description>ilSetData just updates the current bound image data (bound by ilBindImage) with new data of the same size. This way new memory does not have to be allocated, so transfers are much faster.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a description="Data was NULL." name="IL_INVALID_PARAM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilClearColour</name>
      <return>ILvoid</return>
      <param description="Amount of red to clear to." name="Red" type="ILclampf" />
      <param description="Amount of green to clear to." name="Green" type="ILclampf" />
      <param description="Amount of blue to clear to." name="Blue" type="ILclampf" />
      <param description="Amount of alpha to clear to." name="Alpha" type="ILclampf" />
      <description>ilClearColour sets the current clearing colour to be used by future calls to ilClearImage.  iluRotate and iluEnlargeCanvas both use these values to clear blank space in images, too.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilClearImage" />
        <a from="ILU" name="iluRotate" />
        <a from="ILU" name="iluEnlargeCanvas" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetData</name>
      <return>ILubyte *</return>
      <description>ilGetData returns an unsigned byte pointer to the current bound image&apos;s data to allow direct access and modification to the contents of the image.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetPalette" />
        <a from="IL" name="ilCopyPixels" />
      </link>
    </entity>
    <entity type="function">
      <name>ilHint</name>
      <return>ILvoid</return>
      <param description="An enum indicating what behaviour of the library is to be controlled." name="Target" type="ILenum" />
      <param description="The desired behaviour." name="Mode" type="ILenum" />
      <description>ilHint lets the user control aspects of OpenIL&apos;s behaviour, in order to optimize either speed, memory, compression or quality, depending wholly on what the user desires.</description>
      <link name="Targets" verbose="true">
        <a from="IL" description="Controls the memory used vs. speed tradeoff." name="IL_MEM_SPEED_HINT" />
        <a from="IL" description="Controls whether compression is used when saving images." name="IL_COMPRESSION_HINT" />
      </link>
      <link name="Modes" verbose="true">
        <a from="IL" description="Makes the target use a faster but more memory-intensive algorithm." name="IL_FASTEST" />
        <a from="IL" description="Makes the target use less memory but a potentially slower algorithm." name="IL_LESS_MEM" />
        <a from="IL" description="Specifies that OpenIL should use compression when saving, if possible." name="IL_USE_COMPRESSION" />
        <a from="IL" description="Specifies that OpenIL should never use compression when saving." name="IL_NO_COMPRESSION" />
        <a from="IL" description="The client does not have a preference." name="IL_DONT_CARE" />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" description="Either Target or Mode was an invalid enum." name="IL_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetPalette" />
        <a from="IL" name="ilCopyPixels" />
      </link>
    </entity>
    <entity type="function">
      <name>ilIsImage</name>
      <return>ILboolean</return>
      <param description="An image name." name="Image" type="ILuint" />
      <description>ilIsImage returns whether the image name in Image is a valid image in use. If the image name in Image is in use, ilIsImage returns IL_TRUE. If Image is 0, ilIsImage returns IL_FALSE, because the default image is a special image and is never returned by ilGenImages. If the image name has been deleted by ilDeleteImages or never generated byilGenImages, IL_FALSE is returned.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilCreateDefaultTex" />
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilDeleteImages" />
      </link>
    </entity>
    <entity type="function">
      <name>ilConvertPal</name>
      <return>ILboolean</return>
      <param description="The format the current image palette should be converted to. Accepted Values are: &lt;dl&gt;&lt;dd&gt;IL_PAL_RGB24&lt;/dd&gt;&lt;dd&gt;IL_PAL_RGB32&lt;/dd&gt;&lt;dd&gt;IL_PAL_RGBA32&lt;/dd&gt;&lt;dd&gt;IL_PAL_BGR24&lt;/dd&gt;&lt;dd&gt;IL_PAL_BGR32&lt;/dd&gt;&lt;dd&gt;IL_PAL_BGRA32&lt;/dd&gt;&lt;/dl&gt;" name="DestFormat" type="ILenum" />
      <description>ilIsImage returns whether the image name in Image is a valid image in use. If the image name in Image is in use, ilIsImage returns IL_TRUE. If Image is 0, ilIsImage returns IL_FALSE, because the default image is a special image and is never returned by ilGenImages. If the image name has been deleted by ilDeleteImages or never generated byilGenImages, IL_FALSE is returned.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. " />
        <a from="IL" name="IL_OUT_OF_MEMORY" description="Could not allocate memory for the new image palette." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilCreateDefaultTex" />
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilDeleteImages" />
      </link>
    </entity>
    <entity type="function">
      <name>ilLoad</name>
      <return>ILboolean</return>
      <param name="Type" type="ILenum" description="Format Specification" />
      <param name="FileName" type="char *" description="File to load the image" />
      <description>ilLoad can be used much in the same way ilLoadImage is used, except with ilLoad, it is possible to force OpenIL to load a file as a specific image format, no matter what the extension.</description>
      <link name="Types" verbose="true">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Load the image as a Microsoft bitmap (.bmp)." />
        <a name="IL_CUT" description="Load the image as a .cut image." />
        <a name="IL_DDS" description="Load a DirectDraw Surface (.dds) image." />
        <a name="IL_DOOM" description="Load the image as a Doom texture." />
        <a name="IL_DOOM_FLAT" description="Load the image as a Doom flat (floor)." />
        <a name="IL_GIF" description="Load a Graphics Interchange Format (.gif) file." />
        <a name="IL_ICO" description="Load the image as a Microsoft icon (.ico)." />
        <a name="IL_JPG" description="Load the image as a Jpeg (.jpg)." />
        <a name="IL_MDL" description="Load an Half-Life model file (.mdl)." />
        <a name="IL_MNG" description="Load a Multiple Network Graphics (.mng)." />
        <a name="IL_LIF" description="Load an Homeworld image." />
        <a name="IL_PCD" description="Load the image as a .pcd image." />
        <a name="IL_PCX" description="Load the image as a PCX." />
        <a name="IL_PIC" description="Load the image as a .pic image." />
        <a name="IL_PIX" description="Load an Alias | Wavefront .pix file." />
        <a name="IL_PNG" description="Load a Portable Network Graphics (.png) image." />
        <a name="IL_PNM" description="Load a Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="Load a PhotoShop (.psd) file." />
        <a name="IL_PSP" description="Load a Paint Shop Pro file." />
        <a name="IL_PXR" description="Load a Pxrar (.pxr) file." />
        <a name="IL_SGI" description="Load an SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="Load a TrueVision Targa." />
        <a name="IL_TIF" description="Load a TIFF (.tif or .tiff) image." />
        <a name="IL_RAW" description="Load the image as raw data with a 13-byte header." />
        <a name="IL_WAL" description="Load a Quake .wal texture." />
        <a name="IL_XPM" description="Load an .xpm file." />
        <a name="IL_JASC_PAL" description="Load the file into the current image's palette as a Paint Shop Pro (Jasc) palette." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. " />
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="The file pointed to by FileName could not be opened. Either the file does not exist or is in use by another process." />
        <a from="IL" name="IL_INVALID_ENUM" description="Type was of an invalid value." />
        <a from="IL" name="IL_INVALID_PARAM" description="FileName or Type was NULL." />
        <a from="IL" name="IL_INVALID_FILE_HEADER" description="The file had an invalid header and could not be loaded." />
        <a from="IL" name="IL_ILLEGAL_FILE_VALUE" description="The file could not be loaded due to an invalid value present." />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
        <a from="IL" name="IL_LIB_JPEG_ERROR" description="Error occurred when trying to load a jpeg." />
        <a from="IL" name="IL_LIB_PNG_ERROR" description="Error occurred when trying to load a png." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="function">
      <name>ilLoadF</name>
      <return>ILboolean</return>
      <param name="Type" type="ILenum" description="Image format" />
      <param name="File" type="ILHANDLE" description="Pointer to a previous opened file" />
      <description>ilLoadF loads an image from a previously opened file</description>
      <link name="Types" verbose="true">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Load the image as a Microsoft bitmap (.bmp)." />
        <a name="IL_CUT" description="Load the image as a .cut image." />
        <a name="IL_DDS" description="Load a DirectDraw Surface (.dds) image." />
        <a name="IL_DOOM" description="Load the image as a Doom texture." />
        <a name="IL_DOOM_FLAT" description="Load the image as a Doom flat (floor)." />
        <a name="IL_GIF" description="Load a Graphics Interchange Format (.gif) file." />
        <a name="IL_ICO" description="Load the image as a Microsoft icon (.ico)." />
        <a name="IL_JPG" description="Load the image as a Jpeg (.jpg)." />
        <a name="IL_MDL" description="Load an Half-Life model file (.mdl)." />
        <a name="IL_MNG" description="Load a Multiple Network Graphics (.mng)." />
        <a name="IL_LIF" description="Load an Homeworld image." />
        <a name="IL_PCD" description="Load the image as a .pcd image." />
        <a name="IL_PCX" description="Load the image as a PCX." />
        <a name="IL_PIC" description="Load the image as a .pic image." />
        <a name="IL_PIX" description="Load an Alias | Wavefront .pix file." />
        <a name="IL_PNG" description="Load a Portable Network Graphics (.png) image." />
        <a name="IL_PNM" description="Load a Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="Load a PhotoShop (.psd) file." />
        <a name="IL_PSP" description="Load a Paint Shop Pro file." />
        <a name="IL_PXR" description="Load a Pxrar (.pxr) file." />
        <a name="IL_SGI" description="Load an SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="Load a TrueVision Targa." />
        <a name="IL_TIF" description="Load a TIFF (.tif or .tiff) image." />
        <a name="IL_RAW" description="Load the image as raw data with a 13-byte header." />
        <a name="IL_WAL" description="Load a Quake .wal texture." />
        <a name="IL_XPM" description="Load an .xpm file." />
        <a name="IL_JASC_PAL" description="Load the file into the current image's palette as a Paint Shop Pro (Jasc) palette." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. " />
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="The file pointed to by FileName could not be opened. Either the file does not exist or is in use by another process." />
        <a from="IL" name="IL_INVALID_ENUM" description="Type was of an invalid value." />
        <a from="IL" name="IL_INVALID_PARAM" description="FileName or Type was NULL." />
        <a from="IL" name="IL_INVALID_FILE_HEADER" description="The file had an invalid header and could not be loaded." />
        <a from="IL" name="IL_ILLEGAL_FILE_VALUE" description="The file could not be loaded due to an invalid value present." />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
        <a from="IL" name="IL_LIB_JPEG_ERROR" description="Error occurred when trying to load a jpeg." />
        <a from="IL" name="IL_LIB_PNG_ERROR" description="Error occurred when trying to load a png." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="function">
      <name>ilLoadL</name>
      <return>ILboolean</return>
      <param name="Type" type="ILenum" description="Image format" />
      <param name="Lump" type="ILvoid *" description="Lump Address" />
      <param name="Size" type="ILuint" description="Lump size" />
      <description>ilLoadL loads an image from a memory lump</description>
      <link name="Types" verbose="true">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Load the image as a Microsoft bitmap (.bmp)." />
        <a name="IL_CUT" description="Load the image as a .cut image." />
        <a name="IL_DDS" description="Load a DirectDraw Surface (.dds) image." />
        <a name="IL_DOOM" description="Load the image as a Doom texture." />
        <a name="IL_DOOM_FLAT" description="Load the image as a Doom flat (floor)." />
        <a name="IL_GIF" description="Load a Graphics Interchange Format (.gif) file." />
        <a name="IL_ICO" description="Load the image as a Microsoft icon (.ico)." />
        <a name="IL_JPG" description="Load the image as a Jpeg (.jpg)." />
        <a name="IL_MDL" description="Load an Half-Life model file (.mdl)." />
        <a name="IL_MNG" description="Load a Multiple Network Graphics (.mng)." />
        <a name="IL_LIF" description="Load an Homeworld image." />
        <a name="IL_PCD" description="Load the image as a .pcd image." />
        <a name="IL_PCX" description="Load the image as a PCX." />
        <a name="IL_PIC" description="Load the image as a .pic image." />
        <a name="IL_PIX" description="Load an Alias | Wavefront .pix file." />
        <a name="IL_PNG" description="Load a Portable Network Graphics (.png) image." />
        <a name="IL_PNM" description="Load a Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="Load a PhotoShop (.psd) file." />
        <a name="IL_PXR" description="Load a Pxrar (.pxr) file." />
        <a name="IL_SGI" description="Load an SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="Load a TrueVision Targa." />
        <a name="IL_TIF" description="Load a TIFF (.tif or .tiff) image." />
        <a name="IL_RAW" description="Load the image as raw data with a 13-byte header." />
        <a name="IL_WAL" description="Load a Quake .wal texture." />
        <a name="IL_XPM" description="Load an .xpm file." />
        <a name="IL_JASC_PAL" description="Load the file into the current image's palette as a Paint Shop Pro (Jasc) palette." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. " />
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="The file pointed to by FileName could not be opened. Either the file does not exist or is in use by another process." />
        <a from="IL" name="IL_INVALID_ENUM" description="Type was of an invalid value." />
        <a from="IL" name="IL_INVALID_PARAM" description="Lump or Size were NULL." />
        <a from="IL" name="IL_INVALID_FILE_HEADER" description="The file had an invalid header and could not be loaded." />
        <a from="IL" name="IL_ILLEGAL_FILE_VALUE" description="The file could not be loaded due to an invalid value present." />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
        <a from="IL" name="IL_LIB_JPEG_ERROR" description="Error occurred when trying to load a jpeg." />
        <a from="IL" name="IL_LIB_PNG_ERROR" description="Error occurred when trying to load a png." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterLoad</name>
      <return>ILboolean</return>
      <param name="Ext" type="char *" description="Extension of the image type to load" />
      <param name="IL_LOADPROC" type="Load" description="Pointer to a loading function" />
      <description>ilRegisterLoad allows the user to register functions for use by OpenIL, when loading unknown image types. The user can also override the default internal loading functions by passing their extension in Ext when using ilLoadImage. ilRegisterLoad allows the user to use their own loading functions while using OpenIL's capabilities, or to extend OpenIL when it does not support a specific image format</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterSave" />
        <a from="IL" name="ilRemoveLoad" />
        <a from="IL" name="ilRemoveSave" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterFormat</name>
      <return>ILvoid</return>
      <param name="Format" type="ILenum" description="The format that the registered image is in." />
      <description>ilRegisterFormat tells OpenIL what format the current registered image is in. This function is to be used from within functions that have been registered via ilRegisterLoad</description>
      <link name="Formats" verbose="true">
        <a name="IL_RGB" description="" />
        <a name="IL_RGBA" description="" />
        <a name="IL_BGR" description="" />
        <a name="IL_BGRA" description="" />
        <a name="IL_LUMINANCE" description="" />
        <a name="IL_LUMINANCE_ALPHA" description="" />
        <a name="IL_COLOR_INDEX" description="" />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterLoad" />
        <a from="IL" name="ilRegisterType" />
        <a from="IL" name="ilRegisterOrigin" />
        <a from="IL" name="ilRegisterPal" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterOrigin</name>
      <return>ILvoid</return>
      <param name="Origin" type="ILenum" description="The new Origin of the image" />
      <description>ilRegisterFormat tells OpenIL what format the current registered image is in. This function is to be used from within functions that have been registered via ilRegisterLoad</description>
      <param description="Specifies the origin to be used" name="Mode" type="ILenum" />
      <link name="Origin" verbose="true">
        <a description="The origin is in the lower left of the image." name="IL_ORIGIN_LOWER_LEFT" />
        <a description="The origin is in the upper left of the image." name="IL_ORIGIN_UPPER_LEFT" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterLoad" />
        <a from="IL" name="ilRegisterType" />
        <a from="IL" name="ilRegisterOrigin" />
        <a from="IL" name="ilRegisterPal" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterPal</name>
      <return>ILvoid</return>
      <param name="Pal" type="ILvoid" description="Pointer to palette to be copied to the current image" />
      <param name="Size" type="ILuint" description="Size of Pal in bytes" />
      <param name="Type" type="ILenum" description="Type of the palette." />
      <description>The ilRegisterPal function registers the current image's palette.</description>
      <link name="Types" verbose="true">
        <a name="IL_PAL_RGB24" description="" />
        <a name="IL_PAL_RGB32" description="" />
        <a name="IL_PAL_RGBA32" description="" />
        <a name="IL_PAL_RGB16_TGA" description="" />
        <a name="IL_PAL_BGR24" description="" />
        <a name="IL_PAL_BGR32" description="" />
        <a name="IL_PAL_BGRA32" description="" />
        <a name="IL_PAL_BGR16_TGA" description="" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterLoad" />
        <a from="IL" name="ilRegisterFormat" />
        <a from="IL" name="ilRegisterOrigin" />
        <a from="IL" name="ilRegisterPal" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterType</name>
      <return>ILvoid</return>
      <param description="The type the current image should be converted to. Values accepted are: &lt;dl&gt;&lt;dd&gt;IL_BYTE&lt;/dd&gt;&lt;dd&gt;IL_UNSIGNED_BYTE&lt;/dd&gt;&lt;dd&gt;IL_SHORT&lt;/dd&gt;&lt;dd&gt;IL_UNSIGNED_SHORT&lt;/dd&gt;&lt;dd&gt;IL_INT&lt;/dd&gt;&lt;dd&gt;IL_UNSIGNED_INT&lt;/dd&gt;&lt;dd&gt;IL_FLOAT&lt;/dd&gt;&lt;/dl&gt;" name="Type" type="ILenum" />
      <description>ilRegisterType tells OpenIL what datatype the current registered image uses. This function is to be used from within functions that have been registered via ilRegisterLoad.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterLoad" />
        <a from="IL" name="ilRegisterFormat" />
        <a from="IL" name="ilRegisterOrigin" />
        <a from="IL" name="ilRegisterPal" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterSave</name>
      <return>ILboolean</return>
      <param name="Ext" type="char *" description="Extension of the image type to save" />
      <param name="Save" type="IL_SAVEPROC" description="Pointer to a saving function" />
      <description>ilRegisterType tells OpenIL what datatype the current registered image uses. This function is to be used from within functions that have been registered via ilRegisterLoad.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterLoad" />
        <a from="IL" name="ilRemoveSave" />
        <a from="IL" name="ilRemoveLoad" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRemoveLoad</name>
      <return>ILboolean</return>
      <param name="Ext" type="char *" description="Extension to remove (e.g. tga)." />
      <description>ilRemoveLoad removes a registered extension handler from the registered load functions list. Use this function when a new handler for an extension needs to be registered.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterLoad" />
        <a from="IL" name="ilRemoveSave" />
        <a from="IL" name="ilRegisterSave" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRemoveSave</name>
      <return>ILboolean</return>
      <param name="Ext" type="char *" description="Extension to remove (e.g. tga)." />
      <description>ilRemoveSave removes a registered extension handler from the registered save functions list. Use this function when a new handler for an extension needs to be registered.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilRegisterSave" />
        <a from="IL" name="ilRemoveSave" />
        <a from="IL" name="ilRegisterSave" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSavePal</name>
      <return>ILboolean</return>
      <param name="FileName" type="char *" description="Filename to save the palette data to." />
      <description>If the current bound image has a palette, ilSavePal saves the current image's palette to the file specified by FileName. Currently, OpenIL only supports saving to Paint Shop Pro .pal files.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INVALID_PARAM" description="FileName or Type was NULL." />
        <a from="IL" name="IL_INVALID_EXTENSION" description="No extension set matched FileName's extension." />
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="Could not open FileName for writing." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilGetPalette</name>
      <return>ILubyte *</return>
      <description>ilGetPalette returns an unsigned byte pointer to the current bound image's palette (if one exists) to allow direct access and modification to the contents of the palette.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetData" />
      </link>
    </entity>
    <entity type="function">
      <name>ilLoadPal</name>
      <return>ILboolean</return>
      <param name="FileName" type="char *" description="Filename to load the palette data from." />
      <description>ilLoadPal simply loads a palette from the file specified by FileName into the current bound image's palette. If the current bound image is not of type IL_COLOR_INDEX, the palette is not used, but it is loaded nonetheless. ilLoadPal can load .col, Halo and Jasc PSP palette files.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INVALID_PARAM" description="FileName or Type was NULL." />
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="Could not open FileName for writing." />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetPixels</name>
      <return>ILvoid</return>
      <param name="XOff" type="ILuint" description="Where to begin copying pixels to in the x direction." />
      <param name="YOff" type="ILuint" description="Where to begin copying pixels to in the y direction." />
      <param name="ZOff" type="ILuint" description="Where to begin copying pixels to in the z direction." />
      <param name="Width" type="ILuint" description="How many pixels to copy in the x direction." />
      <param name="Height" type="ILuint" description="How many pixels to copy in the y direction." />
      <param name="Depth" type="ILuint" description="How many pixels to copy in the z direction." />
      <param name="Format" type="ILenum" description="The format the input is." />
      <param name="Type" type="ILenum" description="The type the input is." />
      <param name="Data" type="ILvoid *" description="User-defined buffer to copy the image data to." />
      <description>ilCopyPixels has very simple behaviour. It simply copies a block of pixels from the Data buffer to the current image's data. XOff, YOff and ZOff can be used to skip a certain number of pixels in each respective direction. If XOff + Width, YOff + Height and/or ZOff + Depth is greater than the current image's width, height or depth, only the current image's width, height or depth number of pixels will be copied to the current image's data buffer.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INVALID_CONVERSION" description="Format did not match the current image's format. Use ilGetInteger to obtain the current image's format." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetInteger" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterMipNum</name>
      <return>ILboolean</return>
      <param name="Num" type="ILuint" description="Number of mipmaps to create." />
      <description>ilRegisterMipNum tells OpenIL the number of mipmaps the current image has. The mipmaps can then be chosen and modified via ilActiveMipmap. This function is to be used from within functions that have been registered via ilRegisterLoad.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilActiveMipmap" />
        <a from="IL" name="ilRegisterNumImages" />
        <a from="IL" name="ilRegisterLoad" />
      </link>
    </entity>
    <entity type="function">
      <name>ilRegisterNumImages</name>
      <return>ILboolean</return>
      <param name="Num" type="ILuint" description="Number of images in the animation chain to create." />
      <description>ilRegisterNumImages tells OpenIL the number of images in the current image's animation chain. The "next" images can then be chosen and modified via ilActiveImage. This function is to be used from within functions that have been registered via ilRegisterLoad.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilActiveMipmap" />
        <a from="IL" name="ilRegisterNumImages" />
        <a from="IL" name="ilRegisterLoad" />
      </link>
    </entity>
    <entity type="function">
      <name>ilActiveLayer</name>
      <return>ILboolean</return>
      <param name="Number" type="ILuint" description="Layer number to select as current." />
      <description>ilActiveLayer is not yet used.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_INTERNAL_ERROR" description="*Big* problem with OpenIL. E-mail an admin with the conditions leading up to the error and pray. =]" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilActiveImage" />
        <a from="IL" name="ilActiveMipmap" />
      </link>
    </entity>
    <entity type="function">
      <name>ilOverlayImage</name>
      <return>ILboolean</return>
      <param name="Src" type="ILuint" description="The image to copy." />
      <param name="XCoord" type="ILuint" description="The starting x position of the current image to copy Src to." />
      <param name="YCoord" type="ILuint" description="The starting y position of the current image to copy Src to." />
      <param name="ZCoord" type="ILuint" description="The starting z position of the current image to copy Src to." />
      <description>The ilOverlayImage function copies the image named by Src onto the current bound image. XCoord, YCoord and ZCoord are allowed to be any number, even negative numbers, for if you want to start copying Src in the middle of it to the current image's left side. If the image named by Src has alpha components, then blending will occur, instead of just a simple overlay.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilCloneCurImage</name>
      <return>ILuint</return>
      <description>ilCloneCurImage creates a copy of the current image and returns the id of the new image. If a subimage of the current image is currently selected via ilActiveImage, ilActiveLayer or ilActiveMipmap, the subimage is copied, not the base image.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilCopyImage" />
        <a from="IL" name="ilActiveImage" />
        <a from="IL" name="ilActiveLayer" />
        <a from="IL" name="ilActiveMipmap" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetMemory</name>
      <return>ILvoid</return>
      <param name="AllocFunc" type="mAlloc" description="Specifies a function to override DevIL's allocation function." />
      <param name="FreeFunc" type="mFree" description="Specifies a function to override DevIL's deallocation function." />
      <description>ilSetMemory was created to let DevIL users override the default memory allocation and deallocation functions present in DevIL. This support can be useful if you are using your own optimized memory handler or anything similar.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_INVALID_PARAM" description="Either AllocFunc or FreeFunc is NULL." />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetWrite</name>
      <return>ILvoid</return>
      <param type="fOpenWProc" name="Open" description="Pointer to a function to open a file." />
      <param type="fCloseWProc" name="Close" description="Pointer to a function to close a file." />
      <param type="fPutcProc" name="Putc" description="Pointer to a function to write one byte to a file." />
      <param type="fSeekWProc" name="Seek" description="Pointer to a function to change position in a file." />
      <param type="fTellRProc" name="Tell" description="Pointer to a function to report the position in a file." />
      <param type="fWriteProc" name="Write" description="Pointer to a function to write multiple bytes to a file." />
      <description>ilSetWrite allows you to override the default DevIL saving functions with your own. You are virtually unlimited in how your functions work, as long as they have the same behaviour as DevIL's default saving functions. All the functions work on the ILHANDLE type, which is a just a void pointer.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilSetRead" />
        <a from="IL" name="ilResetRead" />
        <a from="IL" name="ilResetWrite" />
      </link>
    </entity>
    <entity type="function">
      <name>ilResetRead</name>
      <return>ILvoid</return>
      <description>ilResetRead resets the reading functions set by ilSetRead.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilSetRead" />
        <a from="IL" name="ilSetRead" />
        <a from="IL" name="ilResetWrite" />
      </link>
    </entity>
    <entity type="function">
      <name>ilResetWrite</name>
      <return>ILvoid</return>
      <description>ilResetWrite resets the writing functions set by ilSetWrite.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilSetRead" />
        <a from="IL" name="ilSetRead" />
        <a from="IL" name="ilResetRead" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetDuration</name>
      <return>ILboolean</return>
      <param name="Duration" type="ILuint" description="Number of milliseconds to play the currently bound image." />
      <description>ilSetDuration allows you to set how long to show the currently bound image. This function can also change the durations of individual images in animation chains.</description>
    </entity>
    <entity type="function">
      <name>ilApplyProfile</name>
      <return>ILboolean</return>
      <param name="InProfile" type="const ILstring" description="Profile file describing the colour space the image is in." />
      <param name="OutProfile" type="const ILstring" description="Profile file describing the colour space to convert the image to." />
      <description>iluApplyProfile applies a colour profile (files with extension .icm) to the currently bound image. InProfile describes the current image's colour space, and OutProfile describes the colour space to convert the currently bound image to. If InProfile is NULL, DevIL attempts to use the colour profile present in the image, if one is present, else it returns IL_FALSE.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" />
        <a from="IL" name="IL_OUT_OF_MEMORY" />
        <a from="IL" name="IL_INVALID_PARAM" description="InProfile and/or OutProfile was NULL." />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetString</name>
      <return>ILvoid</return>
      <param name="String" type="char *" description="String to use for setting a string field of a specified image format." />
      <param name="Mode" type="ILenum" description="Specifies the string to be set." />
      <link name="Modes" verbose="false">
        <a name="IL_TGA_ID_STRING" from="IL" description="Specifies a string for the identification field of a .tga file. The maximum length is 254 characters." />
        <a name="IL_TGA_AUTHNAME_STRING" from="IL" description="Specifies the author's name for a .tga file, to be put in the extensions field. The maximum length is 40 characters." />
        <a name="IL_TGA_AUTHCOMMENT_STRING" from="IL" description="Specifies any author's comments for a .tga file, to be put in the extensions field. The maximum length is 80 characters." />
        <a name="IL_PNG_AUTHNAME_STRING" from="IL" description="Specifies the author's name for a .png file. The maximum length is 255 characters." />
        <a name="IL_PNG_TITLE_STRING" from="IL" description="Specifies the title of the image for a .png file. The maximum length is 255 characters." />
        <a name="IL_PNG_DESCRIPTION_STRING" from="IL" description="Specifies a short description of the image for a .png file. The maximum length is 255 characters." />
        <a name="IL_TIF_DESCRIPTION_STRING" from="IL" description="Specifies a short description of the image for a .tif file. The maximum length is 255 characters." />
        <a name="IL_TIF_HOSTCOMPUTER_STRING" from="IL" description="Specifies the host computer's name for a .tif file. The maximum length is 255 characters." />
        <a name="IL_TIF_DOCUMENTNAME_STRING" from="IL" description="Specifies the name of the image for a .tif file. The maximum length is 255 characters." />
        <a name="IL_TIF_AUTHNAME_STRING" from="IL" description="Specifies the author's name for a .tif file. The maximum length is 255 characters." />
      </link>
      <description>ilSetString gives DevIL users the option to set strings in certain file formats that have fields for strings, making DevIL highly customizable. Choose one of the acceptable parameters for Mode and specify any string you want. If the string is too long, it will be truncated when writing to the file.</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_INVALID_ENUM" description="Mode was an invalid enum." />
        <a from="IL" name="IL_INVALID_PARAM" description="String was NULL." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSaveF</name>
      <return>ILboolean</return>
      <param name="Type" type="ILenum" description="Image format" />
      <param name="File" type="ILHANDLE" description="Pointer to a previous opened file" />
      <description>ilSaveF saves an image to a previously opened file</description>
      <link name="Types" verbose="true">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Save the image as a Microsoft bitmap (.bmp)." />
        <a name="IL_JPG" description="Save the image as a Jpeg (.jpg)." />
        <a name="IL_PNM" description="Save a Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="Save a PhotoShop (.psd) file." />
        <a name="IL_SGI" description="Save an SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="Save a TrueVision Targa." />
        <a name="IL_CHEAD" description="Save a C Header style image." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. " />
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="The file pointed to by FileName could not be opened. Either the file does not exist or is in use by another process." />
        <a from="IL" name="IL_INVALID_ENUM" description="Type was of an invalid value." />
        <a from="IL" name="IL_INVALID_PARAM" description="FileName or Type was NULL." />
        <a from="IL" name="IL_LIB_JPEG_ERROR" description="Error occurred when trying to save a jpeg." />
        <a from="IL" name="IL_LIB_PNG_ERROR" description="Error occurred when trying to save a png." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSaveL</name>
      <return>ILboolean</return>
      <param name="Type" type="ILenum" description="Image format" />
      <param name="Lump" type="ILvoid *" description="Lump Address" />
      <param name="Size" type="ILuint" description="Lump size" />
      <description>ilSaveL saves an image to a memory lump</description>
      <link name="Types" verbose="true">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Save the image as a Microsoft bitmap (.bmp)." />
        <a name="IL_JPG" description="Save the image as a Jpeg (.jpg)." />
        <a name="IL_PNM" description="Save a Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="Save a PhotoShop (.psd) file." />
        <a name="IL_SGI" description="Save an SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="Save a TrueVision Targa." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. " />
        <a from="IL" name="IL_INVALID_ENUM" description="Type was of an invalid value." />
        <a from="IL" name="IL_OUT_OF_MEMORY" description="Could not allocate memory for the new image palette." />
        <a from="IL" name="IL_LIB_JPEG_ERROR" description="Error occurred when trying to load a jpeg." />
        <a from="IL" name="IL_LIB_PNG_ERROR" description="Error occurred when trying to load a png." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSave</name>
      <return>ILboolean</return>
      <param name="Type" type="ILenum" description="Image format." />
      <param name="File" type="char *" description="The filename of the file to save to." />
      <description>ilSave can be used much in the same way ilSaveImage is used, except with ilSave, it is possible to force OpenIL to save a file as a specific image format, no matter what the extension.</description>
      <link name="Types" verbose="false">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Save the image as a Microsoft bitmap (.bmp)." />
        <a name="IL_JPG" description="Save the image as a Jpeg (.jpg)." />
        <a name="IL_PNM" description="Save a Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="Save a PhotoShop (.psd) file." />
        <a name="IL_PSD" description="Save a PhotoShop (.psd) file." />
        <a name="IL_SGI" description="Save an SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="Save a TrueVision Targa." />
        <a name="IL_CHEAD" description="Save a C Header style image." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_COULD_NOT_OPEN_FILE" description="The file pointed to by FileName could not be opened. Either the file does not exist or is in use by another process." />
        <a from="IL" name="IL_INVALID_ENUM" description="Type was of an invalid value." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="function">
      <name>ilSetInteger</name>
      <return>ILvoid</return>
      <param name="Mode" type="ILenum" description="The mode value to be modified." />
      <param name="Param" type="ILint" description="The value to set the mode with." />
      <description>The ilSetInteger function sets the value of a selected mode. it's the ilGetInteger's counterpart</description>
      <link name="Mode" verbose="true">
        <a name="IL_TGA_CREATE_STAMP" description="Sets whether .tga files are saved with a 'postage stamp' in their extension fields (IL_TRUE or IL_FALSE accepted)." />
        <a name="IL_JPG_QUALITY" description="Sets the quality .jpg files are saved at. Valid values are in the 0-99 range, with 99 being the best quality." />
        <a name="IL_PNG_INTERLACE" description="Tells DevIL to save .png files interlaced." />
        <a name="IL_TGA_RLE" description="Tells DevIL to save .tga files with RLE-compressed data." />
        <a name="IL_BMP_RLE" description="Tells DevIL to save .bmp files with RLE-compressed data." />
        <a name="IL_SGI_RLE" description="Tells DevIL to save .sgi files with RLE-compressed data." />
      </link>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_INVALID_PARAM" description="Param was not in range." />
        <a from="IL" name="IL_INVALID_ENUM" description="Mode was of an invalid value." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilSave" />
        <a from="IL" name="ilSaveImage" />
        <a from="IL" name="ilSetFileCallbacks" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_VENDOR</name>
      <description>Describes the OpenIL vendor and should be used only with ilGetString</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetString" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_VERSION</name>
      <description>Used to retrive a string describing the current OpenIL version.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetString" />
        <a from="IL" name="ilGetInteger" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_ORIGIN_SET</name>
      <description>IL Mode Value. When enabled, the origin is specified at an absolute position, and all images loaded or saved adhere to this set origin. For more information, check out ilOriginFunc.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilDisable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_FILE_OVERWRITE</name>
      <description>IL Mode Value. If enabled while saving, OpenIL will overwrite existing files, else IL_FILE_ALREADY_EXISTS is set, and the image is not saved.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilDisable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_CONV_PAL</name>
      <description>IL Mode Value. When enabled, OpenIL automatically converts palette&apos;d images to their base types, e.g. converting to a bgra image.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilEnable" />
        <a from="IL" name="ilDisable" />
        <a from="IL" name="ilIsEnabled" />
        <a from="IL" name="ilIsDisabled" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_ORIGIN_MODE</name>
      <description>IL Mode Value. Returns the current origin position.</description>
      <link name="Values" verbose="false">
        <a description="Origin is in the lower left corner" name="IL_ORIGIN_LOWER_LEFT" />
        <a description="Origin is in the upper left corner" name="IL_ORIGIN_UPPER_LEFT" />
      </link>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilOriginFunc" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_FILE_MODE</name>
      <description>IL Mode Value. Returns whether file overwriting when saving is enabled.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="IL_FILE_OVERWRITE" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_FORMAT_SET</name>
      <description>IL Mode Value. Returns whether all images loaded are converted to a specific format.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_FORMAT_MODE</name>
      <description>IL Mode Value. Returns the format images are converted to upon loading.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_TYPE_SET</name>
      <description>IL Mode Value. Returns whether all images loaded are converted to a specific type.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_TYPE_MODE</name>
      <description>IL Mode Value. Returns the type images are converted to upon loading.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_VERSION_NUM</name>
      <description>IL Mode Value. Returns the version number of the shared library. This can be checked against the IL_VERSION #define.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_IMAGE_WIDTH</name>
      <description>IL Mode Value. Returns the current image&apos;s width.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_IMAGE_HEIGHT</name>
      <description>IL Mode Value. Returns the current image&apos;s height.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_IMAGE_BYTES_PER_PIXEL</name>
      <description>IL Mode Value. Returns the bytes per pixel of the current image&apos;s data.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_IMAGE_BITS_PER_PIXEL</name>
      <description>IL Mode Value. Returns the bits per pixel of the current image&apos;s data.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_IMAGE_FORMAT</name>
      <description>IL Mode Value. Returns the current image format.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_IMAGE_TYPE</name>
      <description>IL Mode Value. Returns the current images type.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_NUM_IMAGES</name>
      <description>IL Mode Value. Returns the number of images in the current image animation chain.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_NUM_MIPMAPS</name>
      <description>IL Mode Value. Returns the number of mipmaps of the current image.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_PALETTE_TYPE</name>
      <description>IL Mode Value. Returns the palette type of the current image.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_PALETTE_BPP</name>
      <description>IL Mode Value. Returns the bytes per pixel of the current images palette.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_PALETTE_NUM_COLS</name>
      <description>IL Mode Value. Returns the number of colours of the current images palette.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_ACTIVE_IMAGE</name>
      <description>IL Mode Value. Returns the current image number.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_ACTIVE_LAYER</name>
      <description>IL Mode Value. Returns the current layer number.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_CUR_IMAGE</name>
      <description>IL Mode Value. Returns the current bound image name.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_ACTIVE_MIPMAP</name>
      <description>IL Mode Value. Returns the current mipmap number.</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_USE_KEY_COLOUR</name>
      <description>IL Mode Value. Returns whether OpenIL uses a key colour (not used yet).</description>
      <link name="Usage" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="value">
      <name>IL_ILLEGAL_OPERATION</name>
      <description>The operation attempted is not allowable in the current state. The function returns with no ill side effects. Generally there is currently no image bound or it has been deleted via ilDeleteImages. You should use ilGenImages and ilBindImage before calling the function.</description>
    </entity>
    <entity type="value">
      <name>IL_OUT_OF_MEMORY</name>
      <description>Could not allocate enough memory for the image data.</description>
    </entity>
    <entity type="value">
      <name>IL_INVALID_CONVERSION</name>
      <description>During a conversion destination format and/or dest type was an invalid identifier. In the function documentation there should be a more specific descriptionanation.</description>
    </entity>
    <entity type="value">
      <name>IL_INVALID_ENUM</name>
      <description>An invalid value have been used, which was not part of the set of values that can be used. In the function documentation there should be a more specific descriptionanation.</description>
    </entity>
    <entity type="value">
      <name>IL_INVALID_PARAM</name>
      <description>An invalid value have been used, which was not part of the set of values that can be used. In the function documentation there should be a more specific descriptionanation.</description>
    </entity>
    <entity type="value">
      <name>IL_NO_ERROR</name>
      <description>No detectable error has occured.</description>
    </entity>
    <entity type="value">
      <name>IL_FORMAT_NOT_SUPPORTED</name>
      <description>The format a function tried to use was not able to be used by that function.</description>
    </entity>
    <entity type="value">
      <name>IL_INTERNAL_ERROR</name>
      <description>A serious error has occurred. Please e-mail an admin with the conditions leading up to this error being reported.</description>
    </entity>
    <entity type="value">
      <name>IL_INVALID_VALUE</name>
      <description>An invalid value was passed to a function or was in a file.</description>
    </entity>
    <entity type="value">
      <name>IL_ILLEGAL_FILE_VALUE</name>
      <description>An illegal value was found in a file trying to be loaded.</description>
    </entity>
    <entity type="value">
      <name>IL_INVALID_FILE_HEADER</name>
      <description>A file&apos;s header was incorrect.</description>
    </entity>
    <entity type="value">
      <name>IL_COULD_NOT_OPEN_FILE</name>
      <description>Could not open the file specified. The file may already be open by another app or may not exist.</description>
    </entity>
    <entity type="value">
      <name>IL_INVALID_EXTENSION</name>
      <description>The extension of the specified filename was not correct for the type of image-loading function.</description>
    </entity>
    <entity type="value">
      <name>IL_FILE_ALREADY_EXISTS</name>
      <description>The filename specified already belongs to another file. To overwrite files by default read more at ilEnable function.</description>
    </entity>
    <entity type="value">
      <name>IL_OUT_FORMAT_SAME</name>
      <description>Tried to convert an image from its format to the same format.</description>
    </entity>
    <entity type="value">
      <name>IL_STACK_OVERFLOW</name>
      <description>One of the internal stacks was already filled, and the user tried to add on to the full stack.</description>
    </entity>
    <entity type="value">
      <name>IL_STACK_UNDERFLOW</name>
      <description>One of the internal stacks was empty, and the user tried to empty the already empty stack.</description>
    </entity>
    <entity type="value">
      <name>IL_LIB_JPEG_ERROR</name>
      <description>An error occurred in the libjpeg library.</description>
    </entity>
    <entity type="value">
      <name>IL_LIB_PNG_ERROR</name>
      <description>An error occurred in the libpng library.</description>
    </entity>
    <entity type="value">
      <name>IL_UNKNOWN_ERROR</name>
      <description>No function sets this yet, but it is possible (not probable) it may be used in the future.</description>
    </entity>

    <entity type="value">
      <name>IL_ORIGIN_BIT</name>
      <description>Preserves the origin state set by ilOriginFunc.</description>
    </entity>
    <entity type="value">
      <name>IL_FILE_BIT</name>
      <description>Preserves whether OpenIL is allowed to overwrite files when saving (set by ilEnable, ilDisable).</description>
    </entity>
    <entity type="value">
      <name>IL_PAL_BIT</name>
      <description>Preserves whether OpenIL is supposed to convert palette&apos;d to truecolour images (set by ilEnable, ilDisable).</description>
    </entity>
    <entity type="value">
      <name>IL_ALL_ATTRIB_BITS</name>
      <description>Preserves all OpenIL states and attributes.</description>
    </entity>
  </set>
  <set name="ILU">
    <entity type="function">
      <name>iluFlipImage</name>
      <return>ILboolean</return>
      <description>iluFlipImage inverts an image over the x axis. The image will be upside-down after calling this function. If this function is called twice in succession, the image is restored to its original state. A version of this function in OpenIL is used throughout internally when loading images to correct images that would otherwise be upside-down. Using ilOriginFunc will essentially tell the library which way is up.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_OUT_OF_MEMORY" />
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilOriginFunc" />
      </link>
    </entity>
    <entity type="function">
      <name>iluMirror</name>
      <return>ILboolean</return>
      <description>iluMirror mirrors an image across its y axis, making it appear backwards.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>iluNegative</name>
      <return>ILboolean</return>
      <description>iluNegative creates a negative version of an image, like it was viewed as a picture negative instead of the actual picture. The effect is caused by inverting the image's colours, such as a green pixel would become purple (red-blue).</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>iluSwapColours</name>
      <return>ILboolean</return>
      <description>iluSwapColours "swaps" the colour order of the current image. If the current image is in bgr(a) format, iluSwapColours will change the image to use rgb(a) format, or vice-versa. This can be helpful when you want to manipulate the image data yourself but only want to use a certain colour order. To determine the current colour order, call ilGetInteger with the IL_IMAGE_FORMAT parameter.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="function">
      <name>iluBuildMipmaps</name>
      <return>ILboolean</return>
      <description>iluBuildMipmaps generates power-of-2 mipmaps for an image. If the image does not have power-of-2 dimensions, then the image is resized via iluScale. Mipmaps are then generated for the image, down to a 1x1 image. To use the mipmaps, see ilActiveMipmap.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILU" name="iluScale" />
        <a from="IL" name="ilActiveMipmap" />
      </link>
    </entity>
    <entity type="function">
      <name>iluInvertAlpha</name>
      <return>ILboolean</return>
      <description>iluInvertAlpha inverts the alpha of the currently bound image.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilGetAlpha" />
      </link>
    </entity>
    <entity type="function">
      <name>iluGetString</name>
      <return>const char*</return>
      <param name="StringName" type="ILenum" description="Enum that describes the string to be retrieved." />
      <description>iluGetString returns a constant human-readable string describing the current OpenILU implementation.</description>
      <link name="Values" verbose="true">
        <a name="ILU_VENDOR" description="Describes the OpenILU vendor." />
        <a name="ILU_VERSION_NUM" description="Use iluGetInteger with ILU_VERSION_NUM to check for version differences instead." />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_INVALID_ENUM" description="StringName was an invalid enum type." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetString" />
        <a from="ILUT" name="ilutGetString" />
      </link>
    </entity>
    <entity type="function">
      <name>iluErrorString</name>
      <return>const ILbyte*</return>
      <param name="StringName" type="ILenum" description="Enum that describes the string to be retrieved." />
      <description>iluErrorString returns a human-readable string of the error in Error. This can be useful for displaying the human-readable error in your program to let the user know wtf just happened.</description>
      <link name="Values" verbose="true">
        <a name="ILU_VENDOR" description="Describes the OpenILU vendor." />
        <a name="ILU_VERSION_NUM" description="Use iluGetInteger with ILU_VERSION_NUM to check for version differences instead." />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetError" />
      </link>
    </entity>
    <entity type="function">
      <name>iluRotate</name>
      <return>ILboolean</return>
      <param name="Angle" type="ILfloat" description="Angle in degrees to rotate the image." />
      <description>iluRotate simply rotates an image about the center by Angle degrees. The background where there is space left by the rotation will be set to the clear colour.</description>
      <link name="Values" verbose="true">
        <a name="ILU_VENDOR" description="Describes the OpenILU vendor." />
        <a name="ILU_VERSION_NUM" description="Use iluGetInteger with ILU_VERSION_NUM to check for version differences instead." />
      </link>
      <link name="See Also" verbose="false">
        <a from="ILU" name="iluRotate3D" />
        <a from="IL" name="ilClearColour" />
      </link>
    </entity>
    <entity type="function">
      <name>iluAlienify</name>
      <return>ILboolean</return>
      <description>The story behind this function is actually sorta funny. I had been using a picture of me (contact me if you want it! =) as a test image, and I started working on some colour matrix filters. Well, my first attempt screwed-up, because I had changed the equations to accomodate my bgr image, but I transposed the equations entirely wrong. I got a really neat output, though, where I looked like an alien. =) I decided to keep the screw-up and placed it in iluAlienify. I can't say I've ever run across a filter like this before.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluScale</name>
      <return>ILboolean</return>
      <param name="Width" type="ILuint" description="New width of the image." />
      <param name="Height" type="ILuint" description="New height of the image." />
      <param name="Depth" type="ILuint" description="New depth of the image." />
      <description>The iluScale function scales the image to the new dimensions specified, shrinking or enlarging the image, depending on the image's original dimensions. There are different filters that can be used to scale an image, and which filter to use can be specified via iluImageParameter.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluImageParameter" />
      </link>
    </entity>
    <entity type="function">
      <name>iluBlurAvg</name>
      <return>ILboolean</return>
      <param name="Iter" type="ILuint" description="Number of iterations of blurring to perform." />
      <description>iluBlurAvg blurs an image using an averaging convolution filter. The filter is applied up to Iter number of times, giving more of a blurring effect the higher Iter is. The 3x3 convolution filter used to do the average blur is: %center% %img:../images/matrix_avg.gif% %center/%</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluImageParameter" />
      </link>
    </entity> <!-- @TODO Matrix is 	(1,2,1)
										(2,4,2)
										(1,2,1) with scale 9 and offset 1 -->
    <entity type="function">
      <name>iluBlurGaussian</name>
      <return>ILboolean</return>
      <param name="Iter" type="ILuint" description="Number of iterations of blurring to perform." />
      <description>iluBlurGaussian blurs an image using a Gaussian convolution filter, which usually gives better results than the filter used by iluBlurAvg. The filter is applied up to Iter number of times, giving more of a blurring effect the higher Iter is.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluBlurAvg" />
        <a from="ILUA" name="iluSharpen" />
      </link> <!-- @TODO Matrix is 	(1,2,1)
										(2,4,2)
										(1,2,1) with scale 16 and offset 1 -->
    </entity>
    <entity type="function">
      <name>iluContrast</name>
      <return>ILboolean</return>
      <param name="Contrast" type="ILfloat" description="The factor to contrast by" />
      <description>iluContrast changes the contrast of an image by using interpolation and extrapolation. Common values for Contrast are in the range -0.5 to 1.7. Anything below 0.0 generates a negative of the image with varying contrast. 1.0 outputs the original image. 0.0 - 1.0 lowers the contrast of the image. 1.0 - 1.7 increases the contrast of the image. This effect is caused by interpolating (or extrapolating) the source image with a totally grey image.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluCrop</name>
      <return>ILboolean</return>
      <param name="XOff" type="ILuint" description="Number of pixels to skip in the x direction." />
      <param name="YOff" type="ILuint" description="Number of pixels to skip in the y direction." />
      <param name="ZOff" type="ILuint" description="Number of pixels to skip in the z direction." />
      <param name="Width" type="ILuint" description="Number of pixels to preserve in the x direction." />
      <param name="Height" type="ILuint" description="Number of pixels to preserve in the y direction." />
      <param name="Depth" type="ILuint" description="Number of pixels to preserve in the z direction." />
      <description>iluCrop "crops" the current image to new dimensions. The new image appears the same as the original, but portions of the image are clipped-off, depending on the values of the parameters of these functions. If XOff + Width, YOff + Height or ZOff + Depth is larger than the current image's dimensions, ILU_ILLEGAL_OPERATION is set. If ZOff is minus or equal to one the crop will be done only on 2 dimensions</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" description="There is currently no image bound. Use ilGenImages and ilBindImage before calling this function. XOff + Width, YOff + Height, or ZOff + Depth is greater than the current image's dimensions. " />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" description="Could not allocate memory for the new image data." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluEdgeDetectP</name>
      <return>ILboolean</return>
      <description>iluEdgeDetectP detects the edges in the current image by combining two convolution filters. The filters used are Prewitt filters.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" description="Could not allocate memory for the new image data." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluEdgeDetectS" />
      </link>
    </entity><!-- @TODO Matrixes:
					(-1,0,1)
					(-1,0,1)
					(-1,0,1) scale 1 offset 0
					
					(1,1,1)
					(0,0,0)
					(-1,-1,-1) scale 1 offset 0 -->
    <entity type="function">
      <name>iluEdgeDetectS</name>
      <return>ILboolean</return>
      <description>iluEdgeDetectS detects the edges in the current image by combining two convolution filters. The filters used are Sobel filters.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" description="Could not allocate memory for the new image data." />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluEdgeDetectP" />
      </link>
    </entity><!-- @TODO Matrixes:
					(1,2,1)
					(0,0,0)
					(-1,-2,-1) scale 1 offset 0
					
					(1,0,-1)
					(2,0,-2)
					(1,0,-1) scale 1 offset 0 -->
    <entity type="function">
      <name>iluEnlargeCanvas</name>
      <return>ILboolean</return>
      <param name="Width" type="ILuint" description="New image width - must be larger than the current image's width." />
      <param name="Height" type="ILuint" description="New image height - must be larger than the current image's width." />
      <param name="Depth" type="ILuint" description="New image depth - must be larger than the current image's width." />
      <description>iluEnlargeCanvas enlarges the canvas of the current image, clearing the background to the colour specified in ilClearColour. To control the placement of the image, use iluImageParameter</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="IL" name="ilClearColour" />
        <a from="ILU" name="iluImageParameter" />
      </link>
    </entity>
    <entity type="function">
      <name>iluGammaCorrectInter</name>
      <return>ILboolean</return>
      <param name="Gamma" type="ILfloat" description="Gamma correction." />
      <description>iluGammaCorrectInter adjust the gamma of the current image. If Gamma is less than 1.0, the image is darkened. If Gamma is greater than 1.0, the image is brightened. It uses interpolation so it's slower then iluGammaCorrectScale</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluGammaCorrectScale" />
      </link>
    </entity>
    <entity type="function">
      <name>iluGammaCorrectScale</name>
      <return>ILboolean</return>
      <param name="Gamma" type="ILfloat" description="Gamma correction." />
      <description>These two functions adjust the gamma of the current image. If Gamma is less than 1.0, the image is darkened. If Gamma is greater than 1.0, the image is brightened. iluGammaCorrectInter is a slower function and uses interpolation to achieve this effect. iluGammaCorrectScale achieves this effect by scaling the colours via iluScaleColours.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluGammaCorrectScale" />
      </link>
    </entity>
    <entity type="function">
      <name>iluPixelize</name>
      <return>ILboolean</return>
      <param name="PixSize" type="ILuint" description="New pixel size" />
      <description>iluPixelize performs the effect that can be seen on television, where people want their identity to remain anonymous, so the editors cover the person's face with a very blocky pixelized version. PixSize specifies how blocky the image should be, with 1 being the lowest blockiness (doesn't change the image).</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluSaturate1f</name>
      <return>ILboolean</return>
      <param name="Saturation" type="ILfloat" description="Amount of saturation to apply to the current bound image. the value must go from -1.0 to 1.0" />
      <description>iluSaturate1f applies a saturation consistent with the IL_LUMINANCE conversion values to red, green and blue.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluSaturate4f" />
      </link>
    </entity>
    <entity type="function">
      <name>iluSaturate4f</name>
      <return>ILboolean</return>
      <param name="r" type="ILfloat" description="Amount of saturation to apply at the red channel." />
      <param name="g" type="ILfloat" description="Amount of saturation to apply at the green channel." />
      <param name="b" type="ILfloat" description="Amount of saturation to apply at the blue channel." />
      <description>iluSaturate1f applies a saturation consistent with the IL_LUMINANCE conversion values to red, green and blue.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluSaturate1f" />
      </link>
    </entity>
    <entity type="function">
      <name>iluSharpen</name>
      <return>ILboolean</return>
      <param name="Factor" type="ILfloat" description="Factor to sharpen by." />
      <param name="Iter" type="ILuint" description="Number of iterations to perform on the image." />
      <description>iluSharpen can actually either sharpen or blur an image, depending on the value of Factor. iluBlurAvg and iluBlurGaussian are much faster for blurring, though. When Factor is 1.0, the image goes unchanged. When Factor is in the range 0.0 - 1.0, the current image is blurred. When Factor is in the range 1.0 - 2.5, the current image is sharpened. To achieve a more pronounced sharpening/blurring effect, simply increase the number of iterations by increasing the value passed in Iter.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluBlurAvg" />
        <a from="ILU" name="iluBlurGaussian" />
      </link>
    </entity>
    <entity type="function">
      <name>iluCompareImage</name>
      <return>ILboolean</return>
      <param name="Comp" type="ILuint" description="The image to compare with." />
      <description>iluCompareImage compares the current image to the image having the name in Comp. If both images are identical, IL_TRUE is returned. IL_FALSE is returned if the images are not identical. The bound image before calling this function remains the bound image after calling ilCompareImage.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluGetInteger</name>
      <return>ILint</return>
      <param name="Mode" type="ILenum" description="The mode value to be returned." />
      <description>The iluGetInteger function returns the value of a selected mode</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluGetIntegerv" />
        <a from="IL" name="ilGetBoolan" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="ILUT" name="ilGetBoolan" />
        <a from="ILUT" name="ilGetBooleanv" />
        <a from="ILUT" name="ilGetInteger" />
        <a from="ILUT" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="function">
      <name>iluGetIntegerv</name>
      <return>ILvoid</return>
      <param name="Mode" type="ILenum" description="The mode value to be returned." />
      <param name="Param" type="ILint*" description="When used, the value is stored here instead of returned.." />
      <description>The iluGetIntegerv function returns the mode value in the Param parameter.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluGetInteger" />
        <a from="IL" name="ilGetBoolan" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="ILUT" name="ilGetBoolan" />
        <a from="ILUT" name="ilGetBooleanv" />
        <a from="ILUT" name="ilGetInteger" />
        <a from="ILUT" name="ilGetIntegerv" />
      </link>
    </entity>
    <entity type="function">
      <name>iluSaturate4f</name>
      <return>ILboolean</return>
      <param name="r" type="ILfloat" description="Amount of red to use from the original image" />
      <param name="g" type="ILfloat" description="Amount of green to use from the original image" />
      <param name="b" type="ILfloat" description="Amount of blue to use from the original image" />
      <description>iluScaleColours scales the individual colour components of the current bound image. Using 1.0f as any of the parameters yields that colour component's original plane in the new image.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
        <a from="ILU" name="iluGammaCorrectScale" />
      </link>
    </entity>
    <entity type="function">
      <name>iluColoursUsed</name>
      <return>ILboolean</return>
      <description>iluColoursUsed creates a copy of the image data, quicksorts it and counts the number of unique colours in the image. This value is returned without affecting the original image.</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluImageParameter</name>
      <return>ILvoid</return>
      <param name="PName" type="ILenum" description="Parameter name" />
      <param name="Param" type="ILenum" description="Behaviour to use" />
      <description>iluImageParameter modifies the behaviour of some ilu functions. Right now, it controls the behaviour of iluEnlargeCanvas and iluScale. For ILU_FILTER, values for Param other than ILU_NEAREST, ILU_LINEAR and ILU_BILINEAR are higher-quality scaling filters and take longer to perform.</description>
      <link name="Properties" verbose="true">
        <a name="ILU_FILTER" description="Which filter iluScale uses, default is ILU_NEAREST" />
        <a name="ILU_PLACEMENT" description="Where to place the image when using iluEnlargeCanvas. The default is ILU_CENTER" />
      </link>
      <link name="Scale Filters" verbose="true">
        <a name="ILU_NEAREST" description="Uses a nearest filter to scale the image (looks worst)" />
        <a name="ILU_LINEAR" description="Uses a linear interpolation filter to scale the image (looks better)" />
        <a name="ILU_BILINEAR" description="Uses a bilinear (or trilinear for 3d images) interpolation filter to scale the image (looks best)" />
        <a name="ILU_SCALE_BOX" description="Uses a box filter to scale the image" />
        <a name="ILU_SCALE_TRIANGLE" description="Uses a triangle filter to scale the image" />
        <a name="ILU_SCALE_BELL" description="Uses a bell filter to scale the image" />
        <a name="ILU_SCALE_BSPLINE" description="Uses a b-spline filter to scale the image" />
        <a name="ILU_SCALE_LANCZOS3" description="Uses a lanczos filter to scale the image" />
        <a name="ILU_SCALE_MITCHELL" description="Uses a mitchell filter to scale the image" />
      </link>
      <link name="Placements" verbose="true">
        <a name="ILU_LOWER_LEFT" description="Places the image in the lower left of the enlarged canvas" />
        <a name="ILU_LOWER_RIGHT" description="Places the image in the lower right of the enlarged canvas" />
        <a name="ILU_UPPER_LEFT" description="Places the image in the upper left of the enlarged canvas" />
        <a name="ILU_UPPER_RIGHT" description="Places the image in the upper right of the enlarged canvas" />
        <a name="ILU_CENTER" description="Places the image in the center of the enlarged canvas" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_INVALID_ENUM" description="StringName was an invalid enum type."/>
      </link>
      <link name="See Also" verbose="false">
        <a from="ILU" name="iluEnlargeCanvas" />
        <a from="ILU" name="iluScale" />
      </link>
    </entity>
    <entity type="function">
      <name>iluInit</name>
      <return>ILvoid</return>
      <description>iluInit starts ILU and must be called prior to using ILU</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilInit" />
        <a from="ILUT" name="ilutInit" />
      </link>
    </entity>
    <entity type="function">
      <name>iluEmboss</name>
      <return>ILboolean</return>
      <description>iluEmboss embosses an image, causing it to have a "relief" feel to it using a convolution filter:</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
		<!-- @TODO static const ILint filter_emboss_scale = 1;
static const ILint filter_emboss_bias  = 128;
static const ILint filter_emboss[] =
{	-1,  0, 1,
	-1,  0, 1,
      -1,  0, 1 };-->
    <entity type="function">
      <name>iluNoisify</name>
      <return>ILboolean</return>
      <param name="Factor" type="ILclampf" description="Specifies the amount of noise to add. Higher values mean more noise" />
      <description>iluNoisify adds Factor amount of random noise to an image. Factor can range from 0.0f to 1.0f, with 1.0 being extreme noise and 0.0 being no noise</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluNoisify</name>
      <return>ILboolean</return>
      <param name="XDim" type="ILfloat" description="Width multiplier" />
      <param name="YDim" type="ILfloat" description="Height multiplier" />
      <param name="ZDim" type="ILfloat" description="Depth multiplier" />
      <description>iluEnlargeImage enlarges an image's dimensions by multipliers, via iluScale. This function could be useful if you wanted to double the size of all images or something similar</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluNoisify</name>
      <return>ILboolean</return>
      <param name="XDim" type="ILfloat" description="Width multiplier" />
      <param name="YDim" type="ILfloat" description="Height multiplier" />
      <param name="ZDim" type="ILfloat" description="Depth multiplier" />
      <description>iluEnlargeImage enlarges an image's dimensions by multipliers, via iluScale. This function could be useful if you wanted to double the size of all images or something similar</description>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
        <a from="ILU" name="ILU_INVALID_PARAM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImages" />
      </link>
    </entity>
    <entity type="function">
      <name>iluDeleteImage</name>
      <return>ILvoid</return>
      <param name="Id" type="ILuint" description="The image name to delete" />
      <description>iluDeleteImage is a convenience function to delete a single image instead of calling ilDeleteImages. Deprecated! use ilDeleteImage instead</description>
      <link name="Errors" verbose="true">
        <a from="IL" name="IL_INVALID_VALUE" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL"  name="ilGenImages" />
        <a from="IL"  name="ilDeleteImages" />
        <a from="ILU" name="iluGenImage" />
        <a from="IL"  name="ilGenImage" />
        <a from="IL"  name="ilDeleteImage" />
      </link>
    </entity>
    <entity type="function">
      <name>iluGenImage</name>
      <return>ILvoid</return>
      <param name="Id" type="ILuint" description="The image name to delete" />
      <description>iluGenImage is a convenience function to delete a single image instead of calling ilGenImages. Deprecated! use ilGenImage instead</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilDeleteImages" />
        <a from="ILU" name="iluDeleteImage" />
        <a from="IL"  name="ilGenImage" />
        <a from="IL"  name="ilDeleteImage" />
      </link>
    </entity>


    <entity type="function">
      <name>iluGetImageInfo</name>
      <return>ILvoid</return>
      <description>The iluGetImageInfo function retrieves information about the current image in an ILinfo struct. This is useful when you are repeatedly calling ilGetInteger and is more efficient in this case.</description>
      <param name="Info" type="ILinfo*" description="ILinfo struct to receive the image information." />
      <link name="ILInfo structure" verbose="true">
        <a name="Width" description="ILuint which contains the image width" />
        <a name="Height" description="ILuint which contains the image height" />
        <a name="Depth" description="ILuint which contains the image depth" />
        <a name="Bpp" description="ILubyte which contains the image Bytes per pixel (not bits)" />
        <a name=" SizeOfData" description="ILuint which contains the image size of data in bytes" />
        <a name="Format" description="ILuint which contains the image format" />
        <a name="Type" description="ILenum which contains the image type" />
        <a name="Origin" description="ILenum which contains the image origin" />
        <a name="PalType" description="ILenum which contains the image palette type" />
        <a name="PalSize" description="ILenum which contains the image palette size" />
        <a name="NumNext" description="ILenum which contains the number of image following the current" />
        <a name="NumMips" description="ILenum which contains the number of image mipmaps" />
        <a name="NumLayers" description="ILenum which contains the image number of layer" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILU" name="ILU_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
      </link>
    </entity>
	
	
	
	
	
	
		




    <entity type="value">
      <name>ILU_INVALID_PARAM</name>
      <description>A Parameter was invalid or out of range</description>
    </entity>
    <entity type="value">
      <name>ILU_INVALID_ENUM</name>
      <description>A Parameter was invalid or out of range</description>
    </entity>
    <entity type="value">
      <name>ILU_OUT_OF_MEMORY</name>
      <description>Could not allocate enough memory in an operation</description>
    </entity>
    <entity type="value">
      <name>ILU_INTERNAL_ERROR</name>
      <description>A serious error has occurred. Please e-mail an admin with the conditions leading up to this error being reported.</description>
    </entity>
    <entity type="value">
      <name>ILU_INVALID_VALUE</name>
      <description>An invalid value was passed to a function or was in a file</description>
    </entity>
    <entity type="value">
      <name>ILU_ILLEGAL_OPERATION</name>
      <description>The operation attempted is not allowable in the current state. The function returns with no ill side effects. Generally there is currently no image bound or it has been deleted via ilDeleteImages. You should use ilGenImages and ilBindImage before calling the function.</description>
    </entity>
  </set>

  <set name="ILUT">
    <entity type="function">
      <name>ilutIsEnabled</name>
      <return>ILboolean</return>
      <description>ilutIsEnabled returns whether the mode indicated by Mode is enabled.</description>
      <param description="Indicates an OpenIL mode" name="Mode" type="ILenum" />
      <link name="Modes" verbose="true">
        <a from="ILUT" description="Not used right now." name="ILUT_PALETTE_MODE" />
        <a from="ILUT" description="Whether ilut is allowed to use GL_RGB8 and GL_RGBA8 instead of GL_RGB8 or GL_RGBA8 (useful with nVidia cards)." name="ILUT_OPENGL_CONV" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" description="Mode was of an invalid value." name="ILUT_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="ILUT" name="ilutIsDisabled" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutIsDisabled</name>
      <return>ILboolean</return>
      <description>ilutIsDisabled returns whether the mode indicated by Mode is disabled.</description>
      <param description="Indicates an OpenIL mode" name="Mode" type="ILenum" />
      <link name="Modes" verbose="true">
        <a from="ILUT" description="Not used right now." name="ILUT_PALETTE_MODE" />
        <a from="ILUT" description="Whether ilut is allowed to use GL_RGB8 and GL_RGBA8 instead of GL_RGB8 or GL_RGBA8 (useful with nVidia cards)." name="ILUT_OPENGL_CONV" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" description="Mode was of an invalid value." name="ILUT_INVALID_ENUM" />
      </link>
      <link name="See Also" verbose="false">
        <a from="ILUT" name="ilutEnable" />
        <a from="ILUT" name="ilutDisable" />
        <a from="ILUT" name="ilutIsDisabled" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetHPal</name>
      <return>HPALETTE</return>
      <description>The ilutGetHPal function returns a Windows-friendly palette. If the current bound image has a palette, ilutGetHPal returns a Windows-compatible copy of the current image's palette in HPAL format.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
        <a from="ILUT" description="Could not allocate enough memory for the palette. " name="ILUT_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutConvertToHBitmap" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutInit</name>
      <return>ILvoid</return>
      <description>The ilutInit function initializes ILUT.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilInit" />
        <a from="ILU" name="ilutInit" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLBindTexImage</name>
      <return>GLuint</return>
      <description>The ilutGLBindTexImage function binds an image to a generated OpenGL texture.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutGLBuildMipmaps" />
        <a from="ILUT" name="ilutGLScreen" />
        <a from="ILUT" name="ilutGLTexImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLTexImage</name>
      <return>ILboolean</return>
      <description>The ilutGLTexImage function binds an image to an OpenGL texture,  simply calls glTexImage2D with the current bound image's data and attributes.</description>
      <param description="Texture level to place the image at. 0 is the base image level, and anything lower is a mipmap. Use ilActiveMipmap to access OpenIL's mipmaps." name="Level" type="GLuint" />
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilActiveMipmap" />
        <a from="ILUT" name="ilutOglBuildMipmaps" />
        <a from="ILUT" name="ilutGLScreen" />
        <a from="ILUT" name="ilutGLBindTexImage" />
        <a from="ILUT" name="ilutGLScreenie" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLBindMipmaps</name>
      <return>GLuint</return>
      <description>The ilutGLBindMipmaps function binds an image to an OpenGL texture and creates mipmaps, generates a texture via glGenTextures, binds the current OpenIL image to it, generates mipmaps via gluBuild2DMipmaps and returns the texture name. This function is a more general purpose version of ilutOglBindTexImage.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilActiveMipmap" />
        <a from="ILUT" name="ilutGLBuildMipmaps" />
        <a from="ILUT" name="ilutGLBindTexImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLScreen</name>
      <return>ILboolean</return>
      <description>ilutGLScreen copies the current OpenGL window contents to the current bound image, effectively taking a screenshot. The new image attributes are that of the current OpenGL window's.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
        <a from="ILUT" description="Could not allocate enough memory for the palette. " name="ILUT_OUT_OF_MEMORY" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutGLScreenie" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLScreenie</name>
      <return>ILboolean</return>
      <description>ilutGLScreen copies the current OpenGL window contents to a temporary image, effectively taking a screenshot. The screenshot image is then saved to disk as screen0.tga - screen127.tga (the lowest name it can find). This is just a convenience function that uses ilutGLScreen.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
        <a from="ILUT" description="Could not allocate enough memory for the palette. " name="ILUT_OUT_OF_MEMORY" />
        <a from="ILUT" description="All possible files already exist." name="ILUT_COULD_NOT_OPEN_FILE" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutGLScreen" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetWinClipboard</name>
      <return>ILboolean</return>
      <description>ilutGetWinClipboard copies the contents of the Windows clipboard to the current bound image, resizing as necessary.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutSetWinClipboard" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutSetWinClipboard</name>
      <return>ILboolean</return>
      <description>ilutSetWinClipboard copies the current bound image to the Windows clipboard.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutGetWinClipboard" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutPopAttrib</name>
      <return>ILvoid</return>
      <description>ilutPopAttrib pops the last pushed stack entry off the stack and copies the bits specified when pushed by ilutPushAttrib to the previous set of states.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" description="The stack was popped without being pushed by ilutPushAttrib." name="ILUT_STACK_UNDERFLOW" />
      </link>
      <link name="See Also" verbose="false">
        <a from="ILUT" name="ilutPushAttrib" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetBmpInfo</name>
      <return>ILvoid</return>
      <param description="BITMAPINFO struct pointer to be filled." name="Mode" type="Info" />
      <description>ilutGetBmpInfo fills a BITMAPINFO struct with the current image's information. The BITMAPINFO struct is used commonly used in Windows applications.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetPaddedData</name>
      <return>ILvoid</return>
      <description>ilutGetPaddedData gets a copy of the current image's data, but pads it to be DWORD-aligned, just how Windows likes it. Almost all Windows functions that use images expect the images to be DWORD-aligned. The caller is responsible for freeing the memory returned by ilutGetPaddedData.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutSetHPal</name>
      <return>ILboolean</return>
      <param description="A Windows palette to set the palette from" name="Pal" type="HPALETTE" />
      <description>ilutSetHPal sets the current iamge's palette from a logical Windows palette handle specified in Pal. If the current image is not colour-indexed, the palette is still loaded, though it will never be used.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutLoadResource</name>
      <return>ILboolean</return>
      <param description="The application-s HINSTANCE" name="hInst" type="HINSTANCE" />
      <param description="The resource identifier of the resource to be loaded" name="ID" type="ILINT" />
      <param description="The type of user-defined resource (name used when creating)" name="ResourceType" type="char *" />
      <param description="The type of image to be loaded. Use IL_TYPE_UNKNOWN to let OpenIL determine the type" name="Type" type="ILenum" />
      <description>ilutLoadResource is a Windows-specific function that loads a resource as the current bound image. This feature allows you to have images directly in your .exe and not worry whether a particular file is present on the user's harddrive. An alternative, more portable solution is to use ilSave with IL_CHEAD as the Type parameter.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="IL" name="ilSave" />
        <a from="ILUT" name="ilutGetWinClipboard" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLLoadImage</name>
      <return>GLuint</return>
      <param description="Name of the image to load" name="filename" type="char *" />
      <description>ilutGLLoadImage loads an image directly to an OpenGL texture, skipping the use of OpenIL image names.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoadImage" />
        <a from="ILUT" name="ilutWinLoadImage" />
      </link>
    </entity> <!--  sure of absence of errors ?? -->
    <entity type="function">
      <name>ilutWinLoadImage</name>
      <return>HBITMAP</return>
      <param description="Name of the image to load" name="filename" type="char *" />
      <param description="Device context the bitmap should reside in" name="hDC" type="HDC" />
      <description>ilutWinLoadImage loads an image directly to a Win32 HBITMAP, skipping the use of OpenIL image names.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoadImage" />
        <a from="ILUT" name="ilutWinSaveImage" />
        <a from="ILUT" name="ilutGLLoadImage" />
      </link>
    </entity> <!--  sure of absence of errors ?? -->
    <entity type="function">
      <name>ilutSetHBitmap</name>
      <return>HBITMAP</return>
      <param description="Bitmap to copy to the current bound image." name="Bitmap" type="HBITMAP" />
      <description>ilutSetHBitmap copies Bitmap to the current bound image in a format OpenIL can understand. The image can then be used just as if you had loaded an image via ilLoadImage. This function is the opposite of ilutConvertToHBitmap.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoadImage" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutConvertToHBitmap" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutWinSaveImage</name>
      <return>Ilboolean</return>
      <param description="Name of the image file to save to" name="filename" type="char *" />
      <param description="Win32 HBITMAP to save from" name="bitmap" type="HBITMAP" />
      <description>ilutWinSaveImage saves Bitmap to FileName. This function is the complement of ilutWinLoadImage.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilSaveImage" />
        <a from="ILUT" name="ilutWinLoadImage" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetBoolean</name>
      <return>ILboolean</return>
      <param name="mode" type="ILenum" description="The ilutGetBoolean returns the value of a selected mode." />
      <param name="Param" type="ILboolean *" description="Used to store the return values." />
      <description>The ilutGetBooleanv return the value of a selected mode.</description>
      <link name="Modes" verbose="true">
        <a from="ILUT" name="ILUT_PALETTE_MODE" />
        <a from="ILUT" name="ILUT_OPENGL_CONV" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="ILU" name="iluGetBoolean" />
        <a from="ILU" name="iluGetBooleanv" />
        <a from="ILU" name="iluGetInteger" />
        <a from="ILU" name="iluGetIntegerv" />
        <a from="ILUT" name="ilutGetBooleanv" />
        <a from="ILUT" name="ilutGetInteger" />
        <a from="ILUT" name="ilutGetIntegerv" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_INVALID_ENUM" />
        <a from="ILUT" name="ILUT_INVALID_PARAM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetInteger</name>
      <return>ILint</return>
      <param name="mode" type="ILenum" description="The ilutGetBoolean returns the value of a selected mode." />
      <param name="Param" type="ILint *" description="Used to store the return values." />
      <description>The ilutGetIntegerv return the value of a selected mode.</description>
      <link name="Modes" verbose="true">
        <a from="ILUT" name="ILUT_VERSION_NUM" />
        <a from="ILUT" name="ILUT_PALETTE_MODE" />
        <a from="ILUT" name="ILUT_OPENGL_CONV" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="ILU" name="iluGetBoolean" />
        <a from="ILU" name="iluGetBooleanv" />
        <a from="ILU" name="iluGetInteger" />
        <a from="ILU" name="iluGetIntegerv" />
        <a from="ILUT" name="ilutGetBooleanv" />
        <a from="ILUT" name="ilutGetInteger" />
        <a from="ILUT" name="ilutGetIntegerv" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_INVALID_ENUM" />
        <a from="ILUT" name="ILUT_INVALID_PARAM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetBooleanv</name>
      <return>ILvoid</return>
      <param name="mode" type="ILenum" description="The ilutGetBoolean returns the value of a selected mode." />
      <description>The ilutGetBoolean return the value of a selected mode.</description>
      <link name="Modes" verbose="true">
        <a from="ILUT" name="ILUT_PALETTE_MODE" />
        <a from="ILUT" name="ILUT_OPENGL_CONV" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="ILU" name="iluGetBoolean" />
        <a from="ILU" name="iluGetBooleanv" />
        <a from="ILU" name="iluGetInteger" />
        <a from="ILU" name="iluGetIntegerv" />
        <a from="ILUT" name="ilutGetBooleanv" />
        <a from="ILUT" name="ilutGetInteger" />
        <a from="ILUT" name="ilutGetIntegerv" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_INVALID_ENUM" />
        <a from="ILUT" name="ILUT_INVALID_PARAM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGetInteger</name>
      <return>ILint</return>
      <param name="mode" type="ILenum" description="The ilutGetBoolean returns the value of a selected mode." />
      <description>The ilutGetInteger return the value of a selected mode.</description>
      <link name="Modes" verbose="true">
        <a from="ILUT" name="ILUT_VERSION_NUM" />
        <a from="ILUT" name="ILUT_PALETTE_MODE" />
        <a from="ILUT" name="ILUT_OPENGL_CONV" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGetBoolean" />
        <a from="IL" name="ilGetBooleanv" />
        <a from="IL" name="ilGetInteger" />
        <a from="IL" name="ilGetIntegerv" />
        <a from="ILU" name="iluGetBoolean" />
        <a from="ILU" name="iluGetBooleanv" />
        <a from="ILU" name="iluGetInteger" />
        <a from="ILU" name="iluGetIntegerv" />
        <a from="ILUT" name="ilutGetBooleanv" />
        <a from="ILUT" name="ilutGetInteger" />
        <a from="ILUT" name="ilutGetIntegerv" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_INVALID_ENUM" />
        <a from="ILUT" name="ILUT_INVALID_PARAM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutConvertToHBitmap</name>
      <return>HBITMAP</return>
      <param name="hDC" type="HDC" description="The ilutGetBoolean returns the value of a selected mode." />
      <description>ilutConvertToHBitmap creates a Windows bitmap handle (HBITMAP) copy of the current image, for direct use in Windows.</description>
      <link name="See Also" verbose="false">
        <a from="ILUT" name="ilGenImages" />
        <a from="ILUT" name="ilBindImage" />
        <a from="ILUT" name="ilutGetHPal" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_INVALID_ENUM" />
        <a from="ILUT" name="ILUT_INVALID_PARAM" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutGLBuildMipmaps</name>
      <return>ILboolean</return>
      <description>ilutGLBuildMipmaps generates mipmaps via gluBuild2DMipmaps from an image. This function is similar to ilutGLTexImage but creates mipmaps.</description>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilGenImages" />
        <a from="IL" name="ilBindImage" />
        <a from="ILUT" name="ilutGLBindMipmaps" />
      </link>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutD3D8MipFunc</name>
      <return>ILvoid</return>
      <param description="Number of miplevels to use with all D3D8 texture-generation functions. The default is 0." name="NumLevels" type="ILuint" />
      <description>ilutD3D8MipFunc changes the number of miplevels specified whenever creating a Direct3D 8 texture. The default value is 0, which means that all mipmap levels are created.</description>
    </entity>
    <entity type="function">
      <name>ilutD3D8VolTexFromFile</name>
      <return>IDirect3DTexture8 *</return>
      <param description="Pointer to an IDirect3DDevice8 interface, representing the device to be associated with the texture." name="Device" type="IDirect3DDevice8 *" />
      <param description="File to create the texture from." name="FileName" type="char *" />
      <param description="Address of a pointer to an IDirect3DVolumeTexture8 interface, representing the created texture object." name="Texture" type="IDirect3DVolumeTexture8 **" />
      <description>ilutD3D8VolTexFromFile loads the file named by FileName and converts it to a Direct3D 8 volume texture (IDirect3DVolumeTexture8). This function creates the texture, so the pointer does not even have to be allocated beforehand. This function is functionally equivalent to D3DX's D3DXCreateTextureFromFile but for a volume texture.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
        <a from="ILUT" name="ILUT_COULD_NOT_OPEN_FILE" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoad" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutD3D8VolumeTexture</name>
      <return>IDirect3DTexture8 *</return>
      <param description="Pointer to an IDirect3DDevice8 interface, representing the device to be associated with the texture." name="Device" type="IDirect3DDevice8 *" />
      <description>The ilutD3D8VolumeTexture function creates a Direct3D 8 texture (IDirect3DVolumeTexture8) from the current bound image.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoad" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutD3D8TexFromFileInMemory</name>
      <return>ILboolean</return>
      <param description="Pointer to an IDirect3DDevice8 interface, representing the device to be associated with the texture." name="Device" type="IDirect3DDevice8 *" />
      <param name="Lump" type="ILvoid *" description="Location of memory file." />
      <param name="Size" type="ILuint" description="Size of Lump in bytes" />
      <param name="Texture" type="IDirect3DTexture8 **" description="Address of a pointer to an IDirect3DTexture8 interface, representing the created texture object." />
      <description>ilutD3D8TexFromFileInMemory loads the file present in Lump and converts it to a Direct3D 8 texture (IDirect3DTexture8). This function creates the texture, so the pointer does not even have to be allocated beforehand. This function is functionally equivalent to D3DX's D3DXCreateTextureFromFileInMemory.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoadL" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutD3D8VolTexFromFileInMemory</name>
      <return>ILboolean</return>
      <param description="Pointer to an IDirect3DDevice8 interface, representing the device to be associated with the texture." name="Device" type="IDirect3DDevice8 *" />
      <param name="Lump" type="ILvoid *" description="Location of memory file." />
      <param name="Size" type="ILuint" description="Size of Lump in bytes" />
      <param name="Texture" type="IDirect3DTexture8 **" description="Address of a pointer to an IDirect3DTexture8 interface, representing the created texture object." />
      <description>ilutD3D8VolTexFromFileInMemory loads the file present in Lump and converts it to a Direct3D 8 volume texture (IDirect3DVolumeTexture8). This function creates the texture, so the pointer does not even have to be allocated beforehand. This function is functionally equivalent to D3DX's D3DXCreateTextureFromFileInMemory but for a volume texture.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilLoadL" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutD3D8TexFromFileHandle</name>
      <return>ILboolean</return>
      <param description="Pointer to an IDirect3DDevice8 interface, representing the device to be associated with the texture." name="Device" type="IDirect3DDevice8 *" />
      <param name="File" type="ILHANDLE" description="File handle containing the image file" />
      <param name="Texture" type="IDirect3DTexture8 **" description="Address of a pointer to an IDirect3DTexture8 interface, representing the created texture object." />
      <description>ilutD3D8TexFromFileInMemory loads the file present in Lump and converts it to a Direct3D 8 texture (IDirect3DTexture8). This function creates the texture, so the pointer does not even have to be allocated beforehand. This function is functionally equivalent to D3DX's D3DXCreateTextureFromFile but with a file handle.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
    </entity>
    <entity type="function">
      <name>ilutD3D8VolTexFromFileHandle</name>
      <return>ILboolean</return>
      <param description="Pointer to an IDirect3DDevice8 interface, representing the device to be associated with the texture." name="Device" type="IDirect3DDevice8 *" />
      <param name="File" type="ILHANDLE" description="File handle containing the image file" />
      <param name="Texture" type="IDirect3DTexture8 **" description="Address of a pointer to an IDirect3DTexture8 interface, representing the created texture object." />
      <description>ilutD3D8VolTexFromFileHandle loads the file present in File and converts it to a Direct3D 8 volume texture (IDirect3DVolumeTexture8). This function creates the texture, so the pointer does not even have to be allocated beforehand. This function is functionally equivalent to D3DX's D3DXCreateTextureFromFile but with a file handle and a volume texture.</description>
      <link name="Errors" verbose="true">
        <a from="ILUT" name="ILUT_ILLEGAL_OPERATION" />
      </link>
    </entity>
    <entity type="value">
      <name>ILUT_PALETTE_MODE</name>
      <description>An ILUT mode not used right now</description>
      <link name="Usage" verbose="false">
        <a from="ILUT" name="ilutIsDisabled" />
        <a from="ILUT" name="ilutIsEnabled" />
        <a from="ILUT" name="ilutDisable" />
        <a from="ILUT" name="ilutIsEnable" />
      </link>
    </entity>
    <entity type="value">
      <name>ILUT_OPENGL_CONV</name>
      <description>An ILUT mode used to track if OpenIL is allowed to use GL_RGB8 and GL_RGBA8 instead of GL_RGB8 or GL_RGBA8 (useful with nVidia cards)</description>
      <link name="Usage" verbose="false">
        <a from="ILUT" name="ilutIsDisabled" />
        <a from="ILUT" name="ilutIsEnabled" />
        <a from="ILUT" name="ilutDisable" />
        <a from="ILUT" name="ilutIsEnable" />
      </link>
    </entity>
    <entity type="value">
      <name>ILUT_VERSION_NUM</name>
      <description>Returns the version number of the shared library. This can be checked against the ILUT_VERSION #define</description>
    </entity>
    <entity type="value">
      <name>ILUT_PALETTE_MODE</name>
      <description>Whether ilut uses palettes or converts the image to truecolour before sending it to the renderer.</description>
    </entity>
    <entity type="value">
      <name>ILUT_OPENGL_CONV</name>
      <description>Whether to use GL_RGB8 or GL_RGB, etc. when passing data to OpenGL only.</description>
    </entity>
    <entity type="value">
      <name>ILUT_INVALID_ENUM</name>
      <description>An invalid parameter was passed to a function, probably a wrong constant or an out of range value.</description>
    </entity>
    <entity type="value">
      <name>ILUT_ILLEGAL_OPERATION</name>
      <description>The operation attempted is not allowable in the current state. The function returns with no ill side effects.</description>
    </entity>
    <entity type="value">
      <name>ILUT_INVALID_PARAM</name>
      <description>An invalid parameter was passed to a function, such as a NULL pointer.</description>
    </entity>
    <entity type="value">
      <name>ILUT_INVALID_ENUM</name>
      <description>An unacceptable enumerated value was passed to a function.</description>
    </entity>
    <entity type="value">
      <name>ILUT_OUT_OF_MEMORY</name>
      <description>Could not allocate enough memory in an operation.</description>
    </entity>
    <entity type="value">
      <name>ILUT_INVALID_VALUE</name>
      <description>An invalid value was passed to a function or was in a file.</description>
    </entity>
    <entity type="value">
      <name>ILUT_NOT_SUPPORTED</name>
      <description>A type is valid but not supported in the current build.</description>
    </entity>
    <entity type="value">
      <name>ILUT_COULD_NOT_OPEN_FILE</name>
      <description>Could not open the file specified. The file may already be open by another app or may not exist.</description>
    </entity>
    <entity type="value">
      <name>ILUT_STACK_UNDERFLOW</name>
      <description>One of the internal stacks was empty, and the user tried to empty the already empty stack.</description>
    </entity>
    <entity type="value">
      <name>ILUT_STACK_OVERFLOW</name>
      <description>One of the internal stacks was already filled, and the user tried to add on to the full stack.</description>
    </entity>
  </set>

  <set name="Constants">
    <entity type="value">
      <name>Data Formats</name>
      <description>This is a list of all the constants that indicates a particular image format</description>
      <link name="Formats" verbose="false">
        <a name="IL_COLOUR_INDEX" />
        <a name="IL_RGB" />
        <a name="IL_RGBA" />
        <a name="IL_BGR" />
        <a name="IL_BGRA" />
        <a name="IL_LUMINANCE" />
        <a name="IL_LUMINANCE_ALPHA" />
      </link>
    </entity>
    <entity type="value">
      <name>Data Types</name>
      <description>This is a list of all the constants that indicates a particular image data type</description>
      <link name="Formats" verbose="false">
        <a name="IL_BYTE" />
        <a name="IL_UNSIGNED_BYTE" />
        <a name="IL_SHORT" />
        <a name="IL_UNSIGNED_SHORT" />
        <a name="IL_INT" />
        <a name="IL_UNSIGNED INT" />
        <a name="IL_FLOAT" />
        <a name="IL_DOUBLE" />
      </link>
    </entity>
    <entity type="value">
      <name>Palette Types</name>
      <description>This is a list of all the constants that indicates a particular palette color data type</description>
      <link name="Formats" verbose="false">
        <a name="IL_PAL_RGB24" />
        <a name="IL_PAL_RGB32" />
        <a name="IL_PAL_RGBA32" />
        <a name="IL_PAL_BGR24" />
        <a name="IL_PAL_BGR32" />
        <a name="IL_PAL_BGRA32" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilConvertPal" />
      </link>
    </entity>
    <entity type="value">
      <name>Hint Targets</name>
      <description>An enum indicating what behaviour of the library is to be controlled.</description>
      <link name="Targets" verbose="true">
        <a description="Controls the memory used vs. speed tradeoff." name="IL_MEM_SPEED_HINT" />
        <a description="Controls whether compression is used when saving images." name="IL_COMPRESSION_HINT" />
      </link>
      <link name="See Also" verbose="false">
        <a from="IL" name="ilHint" />
      </link>
    </entity>
    <entity type="value">
      <name>Hint Modes</name>
      <description>The desired behaviour of some specific situation</description>
      <link name="Modes" verbose="true">
        <a description="Makes the target use a faster but more memory-intensive algorithm." name="IL_FASTEST" />
        <a description="Makes the target use less memory but a potentially slower algorithm." name="IL_LESS_MEM" />
        <a description="Specifies that OpenIL should use compression when saving, if possible." name="IL_USE_COMPRESSION" />
        <a description="Specifies that OpenIL should never use compression when saving." name="IL_NO_COMPRESSION" />
        <a description="The client does not have a preference." name="IL_DONT_CARE" />
      </link>
    </entity>
    <entity type="value">
      <name>Image Formats</name>
      <description>A List of all the image formats</description>
      <link name="Modes" verbose="true">
        <a name="IL_TYPE_UNKNOWN" description="Tells OpenIL to try to determine the type of image present in FileName, File or Lump." />
        <a name="IL_BMP" description="Microsoft bitmap ." />
        <a name="IL_CHEAD" description="C Header." />
        <a name="IL_CUT" description="Dr. Halo .cut image." />
        <a name="IL_DCX" description=".dcx image." />
        <a name="IL_DDS" description="DirectDraw Surface image." />
        <a name="IL_DOOM" description="Doom texture." />
        <a name="IL_DOOM_FLAT" description="Doom flat (floor)." />
        <a name="IL_GIF" description="Graphics Interchange Format file." />
        <a name="IL_HDR" description="RADIANCE High Dynamic Range Image." />
        <a name="IL_ICO" description="Microsoft icon (.ico)." />
        <a name="IL_JPG" description="Jpeg." />
        <a name="IL_LIF" description="Homeworld image." />
        <a name="IL_MDL" description="Half-Life model file (.mdl)." />
        <a name="IL_MNG" description="Load a Multiple Network Graphics (.mng)." />
        <a name="IL_PCD" description="Kodak PhotoCD image." />
        <a name="IL_PCX" description=" .pcx Image." />
        <a name="IL_PIC" description="Softimage Pic image." />
        <a name="IL_PIX" description="Alias | Wavefront .pix file." />
        <a name="IL_PNG" description="Portable Network Graphics (.png) image." />
        <a name="IL_PNM" description="Portable AnyMap (.pbm, .pgm or .ppm)." />
        <a name="IL_PSD" description="PhotoShop (.psd) file." />
        <a name="IL_PSP" description="Paint Shop Pro file." />
        <a name="IL_PXR" description="Pxrar (.pxr) file." />
        <a name="IL_SGI" description="SGI (.bw, .rgb, .rgba or .sgi)." />
        <a name="IL_TGA" description="TrueVision Targa." />
        <a name="IL_TIF" description="TIFF (.tif or .tiff) image." />
        <a name="IL_RAW" description="Raw data with a 13-byte header." />
        <a name="IL_WAL" description="Quake .wal texture." />
        <a name="IL_XPM" description=".xpm file." />
        <a name="IL_JASC_PAL" description="Load the file into the current image's palette as a Paint Shop Pro (Jasc) palette." />
      </link>
    </entity>
  </set>
</doc>
	
