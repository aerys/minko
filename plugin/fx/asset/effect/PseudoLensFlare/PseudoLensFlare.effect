// pseudo lens flare effect
{
	"name" 	: "pseudo lens flare",
	
	"attributeBindings" : {
		"aPosition"		: "geometry[${geometryId}].position",
		"aUv"			: "geometry[${geometryId}].uv"
	},
	
	"passes" : [
		{
			"name" : "downsample and threshold",
			"uniformBindings" : {
				"uInputTex"		: "material[${materialId}].backbuffer",
				"uScale"		: [ 100.0, 100.0, 100.0, 1.0 ],
				"uBias"			: [ -0.99, -0.99, -0.99, 0.0 ]
			},
			"triangleCulling" : "none",
			"target" : { "name" : "lensflare_downsample", "size" : 256.0},
			"samplerStates" : {
				"uInputTex"	: { "textureFilter" : "linear" }
			},
			"vertexShader" : "#pragma include('PseudoLensFlare.vertex.glsl')",
			"fragmentShader" : "#pragma include('Threshold.fragment.glsl')"
		},
		{
			"name" : "lens features",
			"uniformBindings" : {
				"uInputTex"			: "lensflare_downsample",
				"uDispersal"		: 0.3,
				"uTextureSize"		: [ 256.0, 256.0 ],
				"uHaloWidth"		: 0.45,
				"uDistortion"		: 10.0,
				"uLensColor"		: { "default" : "lens-color.png" }
			},
			"macroBindings" : {
				"NUM_SAMPLES"		: { "default" : 6 }
			},
			"triangleCulling" : "none",
			"target" : { "name" : "lensflare_features", "size" : 256 },
			"samplerStates" : {
				"uInputTex"	: { "textureFilter" : "linear" }
			},
			"vertexShader" : "#pragma include('PseudoLensFlare.vertex.glsl')",
			"fragmentShader" : "#pragma include('LensFeatures.fragment.glsl')"
		},
		{
			"name"	: "gaussian blur horizontal",
			"uniformBindings" : {
				"uTexture" 		: "lensflare_features",
				"uTextureSize"	: 256.0
			},
			"attributeBindings" : {
				"aPosition"	: "geometry[${geometryId}].position",
				"aUv"		: "geometry[${geometryId}].uv"
			},
			"triangleCulling" : "none",
			"target" : { "name" : "lensflare_blur_h", "size" : 256 },
			"samplerStates" : {
				"uTexture"	: { "textureFilter" : "linear" }
			},
			"vertexShader" : "#pragma include('GaussianBlur.vertex.glsl')",
			"fragmentShader" : "#pragma include('HGaussianBlur.fragment.glsl')"
		},
		{
			"name"	: "gaussian blur vertical",
			"uniformBindings" : {
				"uTexture" 		: "lensflare_blur_h",
				"uTextureSize"	: 256.0
			},
			"attributeBindings" : {
				"aPosition"	: "geometry[${geometryId}].position",
				"aUv"		: "geometry[${geometryId}].uv"
			},
			"triangleCulling" : "none",
			"target" : "lensflare_features",
			"samplerStates" : {
				"uTexture"	: { "textureFilter" : "linear" }
			},
			"vertexShader" : "#pragma include('GaussianBlur.vertex.glsl')",
			"fragmentShader" : "#pragma include('VGaussianBlur.fragment.glsl')"
		},
		{
			"name" : "lens compositing",
			"uniformBindings" : {
				"uBackbuffer"		: "material[${materialId}].backbuffer",
				"uFeatures"			: "lensflare_features",
				"uArtefactsScale"	: { "property" : "artefactsScale", "default" : 1.0 },
				"uDirt"				: { "default" : "lens-dirt.png" },
				"uBurst"			: { "default" : "lens-star.png" }
			},
			"triangleCulling" : "none",
			"samplerStates" : {
				"uBackbuffer"	: { "textureFilter" : "linear" },
				"uFeatures"		: { "textureFilter" : "linear" },
				"uDirt"			: { "textureFilter" : "linear" },
				"uBurst"		: { "textureFilter" : "linear" }
			},
			"vertexShader" : "#pragma include('PseudoLensFlare.vertex.glsl')",
			"fragmentShader" : "
				#ifdef GL_ES
				precision mediump float;
				#endif
				
				uniform sampler2D uBackbuffer;
				uniform sampler2D uFeatures;
				uniform sampler2D uDirt;
				uniform sampler2D uBurst;
				uniform float uArtefactsScale;
				
				varying vec2 vTexcoord;
				
				void main(void)
				{
					gl_FragColor = texture2D(uFeatures, vTexcoord) * (texture2D(uDirt, vTexcoord) + texture2D(uBurst, vTexcoord))
						* vec4(vec3(uArtefactsScale), 1.0);
					gl_FragColor += texture2D(uBackbuffer, vTexcoord);
				}
			"
		}
	]
}
